// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/telemetry_service.proto

package capsule8_api_v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import status "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A request message to initiate the streaming of telemetry events
type GetEventsRequest struct {
	// The Subscription message defines which events should be
	// returned in the stream.
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetEventsRequest) Reset()         { *m = GetEventsRequest{} }
func (m *GetEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventsRequest) ProtoMessage()    {}
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_service_95158cc37a1d45fd, []int{0}
}
func (m *GetEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventsRequest.Unmarshal(m, b)
}
func (m *GetEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventsRequest.Marshal(b, m, deterministic)
}
func (dst *GetEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventsRequest.Merge(dst, src)
}
func (m *GetEventsRequest) XXX_Size() int {
	return xxx_messageInfo_GetEventsRequest.Size(m)
}
func (m *GetEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventsRequest proto.InternalMessageInfo

func (m *GetEventsRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

// A response message containing telemetry events
type GetEventsResponse struct {
	// Can publish one or more message(s) at a time
	Events []*ReceivedTelemetryEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// Can publish one or more status(es) at a time
	Statuses             []*status.Status `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetEventsResponse) Reset()         { *m = GetEventsResponse{} }
func (m *GetEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GetEventsResponse) ProtoMessage()    {}
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_service_95158cc37a1d45fd, []int{1}
}
func (m *GetEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventsResponse.Unmarshal(m, b)
}
func (m *GetEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventsResponse.Marshal(b, m, deterministic)
}
func (dst *GetEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventsResponse.Merge(dst, src)
}
func (m *GetEventsResponse) XXX_Size() int {
	return xxx_messageInfo_GetEventsResponse.Size(m)
}
func (m *GetEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventsResponse proto.InternalMessageInfo

func (m *GetEventsResponse) GetEvents() []*ReceivedTelemetryEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *GetEventsResponse) GetStatuses() []*status.Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

// A telemetry event received from a Sensor or Recorder.
type ReceivedTelemetryEvent struct {
	// The time that the event was received by the backplane (in micros
	// since Unix epoch)
	PublishTimeMicros int64 `protobuf:"varint,1,opt,name=publish_time_micros,json=publishTimeMicros,proto3" json:"publish_time_micros,omitempty"`
	// The actual event observed by the Sensor. For historical
	// event subscriptions, this event may be sent from the
	// Recorder.
	Event *TelemetryEvent `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// An opaque ack for the event. If present, this ack must be sent to
	// the PubsubService's Acknowledge method or else the TelemetryService
	// will re-transmit the event.
	Ack                  []byte   `protobuf:"bytes,3,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceivedTelemetryEvent) Reset()         { *m = ReceivedTelemetryEvent{} }
func (m *ReceivedTelemetryEvent) String() string { return proto.CompactTextString(m) }
func (*ReceivedTelemetryEvent) ProtoMessage()    {}
func (*ReceivedTelemetryEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_service_95158cc37a1d45fd, []int{2}
}
func (m *ReceivedTelemetryEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceivedTelemetryEvent.Unmarshal(m, b)
}
func (m *ReceivedTelemetryEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceivedTelemetryEvent.Marshal(b, m, deterministic)
}
func (dst *ReceivedTelemetryEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivedTelemetryEvent.Merge(dst, src)
}
func (m *ReceivedTelemetryEvent) XXX_Size() int {
	return xxx_messageInfo_ReceivedTelemetryEvent.Size(m)
}
func (m *ReceivedTelemetryEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivedTelemetryEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivedTelemetryEvent proto.InternalMessageInfo

func (m *ReceivedTelemetryEvent) GetPublishTimeMicros() int64 {
	if m != nil {
		return m.PublishTimeMicros
	}
	return 0
}

func (m *ReceivedTelemetryEvent) GetEvent() *TelemetryEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ReceivedTelemetryEvent) GetAck() []byte {
	if m != nil {
		return m.Ack
	}
	return nil
}

func init() {
	proto.RegisterType((*GetEventsRequest)(nil), "capsule8.api.v0.GetEventsRequest")
	proto.RegisterType((*GetEventsResponse)(nil), "capsule8.api.v0.GetEventsResponse")
	proto.RegisterType((*ReceivedTelemetryEvent)(nil), "capsule8.api.v0.ReceivedTelemetryEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	// Opens a new stream of telemetry events
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (TelemetryService_GetEventsClient, error)
}

type telemetryServiceClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryServiceClient(cc *grpc.ClientConn) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (TelemetryService_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TelemetryService_serviceDesc.Streams[0], "/capsule8.api.v0.TelemetryService/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_GetEventsClient interface {
	Recv() (*GetEventsResponse, error)
	grpc.ClientStream
}

type telemetryServiceGetEventsClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceGetEventsClient) Recv() (*GetEventsResponse, error) {
	m := new(GetEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
type TelemetryServiceServer interface {
	// Opens a new stream of telemetry events
	GetEvents(*GetEventsRequest, TelemetryService_GetEventsServer) error
}

func RegisterTelemetryServiceServer(s *grpc.Server, srv TelemetryServiceServer) {
	s.RegisterService(&_TelemetryService_serviceDesc, srv)
}

func _TelemetryService_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).GetEvents(m, &telemetryServiceGetEventsServer{stream})
}

type TelemetryService_GetEventsServer interface {
	Send(*GetEventsResponse) error
	grpc.ServerStream
}

type telemetryServiceGetEventsServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceGetEventsServer) Send(m *GetEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TelemetryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "capsule8.api.v0.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _TelemetryService_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capsule8/api/v0/telemetry_service.proto",
}

func init() {
	proto.RegisterFile("capsule8/api/v0/telemetry_service.proto", fileDescriptor_telemetry_service_95158cc37a1d45fd)
}

var fileDescriptor_telemetry_service_95158cc37a1d45fd = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x99, 0x86, 0xbf, 0xfc, 0x4e, 0x0b, 0x6d, 0x47, 0xd4, 0x50, 0x14, 0x6b, 0x40, 0x5a,
	0x5c, 0x4c, 0x4a, 0x45, 0x10, 0x37, 0xe2, 0x42, 0x5c, 0xb9, 0x49, 0xeb, 0xba, 0xa4, 0xe3, 0xa5,
	0x0e, 0x4d, 0x32, 0x63, 0x66, 0x12, 0x70, 0x25, 0x88, 0x2f, 0x20, 0x3e, 0x9a, 0xaf, 0xe0, 0x83,
	0x48, 0x66, 0xd2, 0x52, 0x53, 0x75, 0x37, 0x70, 0xce, 0xfd, 0x38, 0xf7, 0xcc, 0xc5, 0x7d, 0x16,
	0x4a, 0x95, 0x45, 0x70, 0xee, 0x87, 0x92, 0xfb, 0xf9, 0xd0, 0xd7, 0x10, 0x41, 0x0c, 0x3a, 0x7d,
	0x9a, 0x2a, 0x48, 0x73, 0xce, 0x80, 0xca, 0x54, 0x68, 0x41, 0x5a, 0x4b, 0x23, 0x0d, 0x25, 0xa7,
	0xf9, 0xb0, 0xeb, 0x55, 0x27, 0x55, 0x36, 0x53, 0x2c, 0xe5, 0x52, 0x73, 0x91, 0xd8, 0xa1, 0xee,
	0xf1, 0xef, 0x74, 0xc8, 0x21, 0xd1, 0xa5, 0x6d, 0x7f, 0x2e, 0xc4, 0x3c, 0x02, 0x63, 0x0a, 0x93,
	0x44, 0xe8, 0xb0, 0x60, 0xa8, 0x52, 0xdd, 0x2b, 0xd5, 0x54, 0x32, 0x5f, 0xe9, 0x50, 0x67, 0xa5,
	0xe0, 0xdd, 0xe1, 0xf6, 0x0d, 0xe8, 0xeb, 0x02, 0xa4, 0x02, 0x78, 0xcc, 0x40, 0x69, 0x72, 0x85,
	0x9b, 0xeb, 0x39, 0x5c, 0xd4, 0x43, 0x83, 0xc6, 0xe8, 0x80, 0x56, 0xd2, 0xd3, 0xf1, 0x9a, 0x29,
	0xf8, 0x36, 0xe2, 0xbd, 0x22, 0xdc, 0x59, 0xe3, 0x2a, 0x29, 0x12, 0x05, 0xe4, 0x12, 0xd7, 0x4d,
	0x64, 0xe5, 0xa2, 0x9e, 0x33, 0x68, 0x8c, 0xfa, 0x1b, 0xc8, 0x00, 0x18, 0xf0, 0x1c, 0xee, 0x27,
	0xcb, 0x1d, 0x0d, 0x21, 0x28, 0xc7, 0x08, 0xc5, 0xff, 0x6d, 0x7a, 0x50, 0x6e, 0xcd, 0x20, 0x08,
	0xb5, 0x9b, 0xd1, 0x54, 0x32, 0x3a, 0x36, 0x5a, 0xb0, 0xf2, 0x78, 0x6f, 0x08, 0xef, 0xfe, 0x8c,
	0x24, 0x14, 0x6f, 0xcb, 0x6c, 0x16, 0x71, 0xf5, 0x30, 0xd5, 0x3c, 0x86, 0x69, 0xcc, 0x59, 0x2a,
	0x94, 0xd9, 0xd5, 0x09, 0x3a, 0xa5, 0x34, 0xe1, 0x31, 0xdc, 0x1a, 0x81, 0x9c, 0xe1, 0x7f, 0x26,
	0x84, 0x5b, 0x33, 0x6d, 0x1c, 0x6e, 0x44, 0xaf, 0x44, 0xb6, 0x6e, 0xd2, 0xc6, 0x4e, 0xc8, 0x16,
	0xae, 0xd3, 0x43, 0x83, 0x66, 0x50, 0x3c, 0x47, 0xcf, 0xb8, 0xbd, 0xb2, 0x8e, 0xed, 0x79, 0x90,
	0x05, 0xde, 0x5a, 0xb5, 0x45, 0x8e, 0x36, 0xd0, 0xd5, 0x1f, 0xea, 0x7a, 0x7f, 0x59, 0x6c, 0xd9,
	0xde, 0xce, 0xcb, 0xc7, 0xe7, 0x7b, 0xad, 0xe5, 0xe1, 0xe2, 0x66, 0x6c, 0x7f, 0x17, 0xe8, 0x64,
	0x88, 0x66, 0x75, 0xf3, 0xf3, 0xa7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x32, 0x1a, 0xb6,
	0xb7, 0x02, 0x00, 0x00,
}
