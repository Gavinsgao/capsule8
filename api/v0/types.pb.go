// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/types.proto

/*
Package v0 is a generated protocol buffer package.

It is generated from these files:
	capsule8/api/v0/types.proto
	capsule8/api/v0/event.proto
	capsule8/api/v0/telemetry_service.proto
	capsule8/api/v0/subscription.proto
	capsule8/api/v0/expression.proto

It has these top-level messages:
	IPv4Address
	IPv4AddressAndPort
	IPv6Address
	IPv6AddressAndPort
	NetworkAddress
	Event
	ChargenEvent
	TickerEvent
	ContainerEvent
	ProcessEvent
	SyscallEvent
	FileEvent
	Process
	KernelFunctionCallEvent
	NetworkEvent
	GetEventsRequest
	GetEventsResponse
	TelemetryEvent
	Subscription
	ContainerFilter
	EventFilter
	SyscallEventFilter
	ProcessEventFilter
	FileEventFilter
	KernelFunctionCallFilter
	NetworkEventFilter
	ContainerEventFilter
	ChargenEventFilter
	TickerEventFilter
	Modifier
	ThrottleModifier
	LimitModifier
	Value
	BinaryOp
	Expression
*/
package v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Supported network address families
type NetworkAddressFamily int32

const (
	// The network address family is unknown
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_UNKNOWN NetworkAddressFamily = 0
	// AF_INET; IPv4 address formats
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_INET NetworkAddressFamily = 1
	// AF_INET6; IPv6 address formats
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_INET6 NetworkAddressFamily = 2
	// AF_LOCAL / AF_UNIX; local filesystem address formats
	NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_LOCAL NetworkAddressFamily = 3
)

var NetworkAddressFamily_name = map[int32]string{
	0: "NETWORK_ADDRESS_FAMILY_UNKNOWN",
	1: "NETWORK_ADDRESS_FAMILY_INET",
	2: "NETWORK_ADDRESS_FAMILY_INET6",
	3: "NETWORK_ADDRESS_FAMILY_LOCAL",
}
var NetworkAddressFamily_value = map[string]int32{
	"NETWORK_ADDRESS_FAMILY_UNKNOWN": 0,
	"NETWORK_ADDRESS_FAMILY_INET":    1,
	"NETWORK_ADDRESS_FAMILY_INET6":   2,
	"NETWORK_ADDRESS_FAMILY_LOCAL":   3,
}

func (x NetworkAddressFamily) String() string {
	return proto.EnumName(NetworkAddressFamily_name, int32(x))
}
func (NetworkAddressFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// An IPv4 address
type IPv4Address struct {
	// The IPv4 address is network byte order (big endian)
	Address uint32 `protobuf:"fixed32,1,opt,name=address" json:"address,omitempty"`
}

func (m *IPv4Address) Reset()                    { *m = IPv4Address{} }
func (m *IPv4Address) String() string            { return proto.CompactTextString(m) }
func (*IPv4Address) ProtoMessage()               {}
func (*IPv4Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IPv4Address) GetAddress() uint32 {
	if m != nil {
		return m.Address
	}
	return 0
}

// An IPv4 address and port
type IPv4AddressAndPort struct {
	// The IPv4 address
	Address *IPv4Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// The port
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *IPv4AddressAndPort) Reset()                    { *m = IPv4AddressAndPort{} }
func (m *IPv4AddressAndPort) String() string            { return proto.CompactTextString(m) }
func (*IPv4AddressAndPort) ProtoMessage()               {}
func (*IPv4AddressAndPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IPv4AddressAndPort) GetAddress() *IPv4Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IPv4AddressAndPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// An IPv6 address
type IPv6Address struct {
	// The high-order bytes of the IPv6 address
	High uint64 `protobuf:"fixed64,1,opt,name=high" json:"high,omitempty"`
	// The low-order bytes of the IPv6 address
	Low uint64 `protobuf:"fixed64,2,opt,name=low" json:"low,omitempty"`
}

func (m *IPv6Address) Reset()                    { *m = IPv6Address{} }
func (m *IPv6Address) String() string            { return proto.CompactTextString(m) }
func (*IPv6Address) ProtoMessage()               {}
func (*IPv6Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPv6Address) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *IPv6Address) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

// An IPv6 address and port
type IPv6AddressAndPort struct {
	// The IPv6 address
	Address *IPv6Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// The port
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *IPv6AddressAndPort) Reset()                    { *m = IPv6AddressAndPort{} }
func (m *IPv6AddressAndPort) String() string            { return proto.CompactTextString(m) }
func (*IPv6AddressAndPort) ProtoMessage()               {}
func (*IPv6AddressAndPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPv6AddressAndPort) GetAddress() *IPv6Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IPv6AddressAndPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// A network address
type NetworkAddress struct {
	// The address family that specifies which address format is in use
	Family NetworkAddressFamily `protobuf:"varint,1,opt,name=family,enum=capsule8.api.v0.NetworkAddressFamily" json:"family,omitempty"`
	// Types that are valid to be assigned to Address:
	//	*NetworkAddress_Ipv4Address
	//	*NetworkAddress_Ipv6Address
	//	*NetworkAddress_LocalAddress
	Address isNetworkAddress_Address `protobuf_oneof:"address"`
}

func (m *NetworkAddress) Reset()                    { *m = NetworkAddress{} }
func (m *NetworkAddress) String() string            { return proto.CompactTextString(m) }
func (*NetworkAddress) ProtoMessage()               {}
func (*NetworkAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isNetworkAddress_Address interface {
	isNetworkAddress_Address()
}

type NetworkAddress_Ipv4Address struct {
	Ipv4Address *IPv4AddressAndPort `protobuf:"bytes,10,opt,name=ipv4_address,json=ipv4Address,oneof"`
}
type NetworkAddress_Ipv6Address struct {
	Ipv6Address *IPv6AddressAndPort `protobuf:"bytes,20,opt,name=ipv6_address,json=ipv6Address,oneof"`
}
type NetworkAddress_LocalAddress struct {
	LocalAddress string `protobuf:"bytes,30,opt,name=local_address,json=localAddress,oneof"`
}

func (*NetworkAddress_Ipv4Address) isNetworkAddress_Address()  {}
func (*NetworkAddress_Ipv6Address) isNetworkAddress_Address()  {}
func (*NetworkAddress_LocalAddress) isNetworkAddress_Address() {}

func (m *NetworkAddress) GetAddress() isNetworkAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NetworkAddress) GetFamily() NetworkAddressFamily {
	if m != nil {
		return m.Family
	}
	return NetworkAddressFamily_NETWORK_ADDRESS_FAMILY_UNKNOWN
}

func (m *NetworkAddress) GetIpv4Address() *IPv4AddressAndPort {
	if x, ok := m.GetAddress().(*NetworkAddress_Ipv4Address); ok {
		return x.Ipv4Address
	}
	return nil
}

func (m *NetworkAddress) GetIpv6Address() *IPv6AddressAndPort {
	if x, ok := m.GetAddress().(*NetworkAddress_Ipv6Address); ok {
		return x.Ipv6Address
	}
	return nil
}

func (m *NetworkAddress) GetLocalAddress() string {
	if x, ok := m.GetAddress().(*NetworkAddress_LocalAddress); ok {
		return x.LocalAddress
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkAddress_OneofMarshaler, _NetworkAddress_OneofUnmarshaler, _NetworkAddress_OneofSizer, []interface{}{
		(*NetworkAddress_Ipv4Address)(nil),
		(*NetworkAddress_Ipv6Address)(nil),
		(*NetworkAddress_LocalAddress)(nil),
	}
}

func _NetworkAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkAddress)
	// address
	switch x := m.Address.(type) {
	case *NetworkAddress_Ipv4Address:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipv4Address); err != nil {
			return err
		}
	case *NetworkAddress_Ipv6Address:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ipv6Address); err != nil {
			return err
		}
	case *NetworkAddress_LocalAddress:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.LocalAddress)
	case nil:
	default:
		return fmt.Errorf("NetworkAddress.Address has unexpected type %T", x)
	}
	return nil
}

func _NetworkAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkAddress)
	switch tag {
	case 10: // address.ipv4_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPv4AddressAndPort)
		err := b.DecodeMessage(msg)
		m.Address = &NetworkAddress_Ipv4Address{msg}
		return true, err
	case 20: // address.ipv6_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPv6AddressAndPort)
		err := b.DecodeMessage(msg)
		m.Address = &NetworkAddress_Ipv6Address{msg}
		return true, err
	case 30: // address.local_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Address = &NetworkAddress_LocalAddress{x}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkAddress)
	// address
	switch x := m.Address.(type) {
	case *NetworkAddress_Ipv4Address:
		s := proto.Size(x.Ipv4Address)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkAddress_Ipv6Address:
		s := proto.Size(x.Ipv6Address)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkAddress_LocalAddress:
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.LocalAddress)))
		n += len(x.LocalAddress)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*IPv4Address)(nil), "capsule8.api.v0.IPv4Address")
	proto.RegisterType((*IPv4AddressAndPort)(nil), "capsule8.api.v0.IPv4AddressAndPort")
	proto.RegisterType((*IPv6Address)(nil), "capsule8.api.v0.IPv6Address")
	proto.RegisterType((*IPv6AddressAndPort)(nil), "capsule8.api.v0.IPv6AddressAndPort")
	proto.RegisterType((*NetworkAddress)(nil), "capsule8.api.v0.NetworkAddress")
	proto.RegisterEnum("capsule8.api.v0.NetworkAddressFamily", NetworkAddressFamily_name, NetworkAddressFamily_value)
}

func init() { proto.RegisterFile("capsule8/api/v0/types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xdf, 0x6b, 0xba, 0x50,
	0x18, 0xc6, 0xb3, 0xbe, 0x18, 0x9d, 0x7e, 0x7c, 0xe5, 0xd0, 0x45, 0x50, 0x34, 0x31, 0x62, 0xb1,
	0x0b, 0x8d, 0x0a, 0xd9, 0xcd, 0x2e, 0x6c, 0x15, 0x45, 0xcd, 0xe2, 0xd4, 0x88, 0xed, 0xc6, 0x59,
	0xb9, 0x92, 0xd9, 0x8e, 0xa8, 0x19, 0xfd, 0x21, 0xbb, 0xde, 0xbf, 0x3a, 0x3a, 0xa9, 0xab, 0x56,
	0x31, 0x76, 0xf7, 0xa8, 0xcf, 0xf3, 0xf1, 0x79, 0x5f, 0x78, 0x41, 0x76, 0xaa, 0x9a, 0xf6, 0xca,
	0xd0, 0x6e, 0x05, 0xd5, 0xd4, 0x05, 0xb7, 0x2c, 0x38, 0x1b, 0x53, 0xb3, 0x79, 0xd3, 0xc2, 0x0e,
	0x86, 0xff, 0xfd, 0x8f, 0xbc, 0x6a, 0xea, 0xbc, 0x5b, 0xe6, 0xae, 0x41, 0xbc, 0x33, 0x70, 0x6b,
	0xd2, 0x6c, 0x66, 0x69, 0xb6, 0x0d, 0x33, 0x20, 0xaa, 0xee, 0x64, 0x86, 0x62, 0xa9, 0x52, 0x14,
	0xf9, 0x8f, 0xdc, 0x0b, 0x80, 0x7b, 0x46, 0xe9, 0x7d, 0x36, 0xc0, 0x96, 0x03, 0xc5, 0x43, 0x7f,
	0xbc, 0x92, 0xe3, 0x8f, 0xfe, 0xc0, 0xef, 0xa5, 0x02, 0x1a, 0x84, 0xe0, 0x9f, 0x89, 0x2d, 0x27,
	0x13, 0x66, 0xa9, 0x52, 0x12, 0x11, 0xcd, 0x55, 0x49, 0x15, 0x51, 0xfa, 0xb6, 0x2c, 0xf4, 0xf9,
	0x82, 0x70, 0x69, 0x44, 0x34, 0x64, 0x40, 0xc4, 0xc0, 0x6b, 0x92, 0xa2, 0xd1, 0x56, 0x7a, 0xb5,
	0xc4, 0x3f, 0xd5, 0x12, 0x7f, 0x55, 0xeb, 0x23, 0x0c, 0x52, 0xb2, 0xe6, 0xac, 0xb1, 0xf5, 0xe6,
	0x57, 0xbb, 0x03, 0xf4, 0xab, 0xba, 0xd4, 0x8d, 0x0d, 0xa1, 0xa7, 0x2a, 0xc5, 0x1f, 0xf4, 0xc3,
	0x40, 0x8b, 0x98, 0x91, 0x17, 0x82, 0x6d, 0x90, 0xd0, 0x4d, 0xb7, 0xa6, 0xf8, 0x15, 0x01, 0xa9,
	0x58, 0xb8, 0xb4, 0x39, 0x6f, 0xb0, 0x76, 0x08, 0xc5, 0xb7, 0x51, 0xbf, 0xc8, 0x8e, 0x24, 0x06,
	0xa4, 0xf4, 0x79, 0x92, 0x78, 0x92, 0x14, 0x6c, 0xbb, 0x08, 0x92, 0x06, 0x9e, 0xaa, 0x46, 0x80,
	0xca, 0xb3, 0x54, 0x29, 0xd6, 0x0e, 0xa1, 0x04, 0x79, 0xed, 0xd9, 0xea, 0xb1, 0x60, 0xb1, 0x37,
	0x9f, 0x14, 0x48, 0x9f, 0x1a, 0x13, 0x72, 0x20, 0x2f, 0x37, 0x47, 0xe3, 0x3e, 0xea, 0x2a, 0x52,
	0xa3, 0x81, 0x9a, 0xc3, 0xa1, 0xd2, 0x92, 0x1e, 0x3a, 0xbd, 0x27, 0xe5, 0x51, 0xee, 0xca, 0xfd,
	0xb1, 0xcc, 0x84, 0xe0, 0x15, 0xc8, 0x9e, 0xf1, 0x74, 0xe4, 0xe6, 0x88, 0xa1, 0x20, 0x0b, 0x72,
	0x17, 0x0c, 0x22, 0x13, 0xbe, 0xe0, 0xe8, 0xf5, 0xef, 0xa5, 0x1e, 0x13, 0xa9, 0x17, 0x9f, 0x0b,
	0x73, 0xdd, 0x59, 0xac, 0x26, 0xfc, 0x14, 0x2f, 0x85, 0xe0, 0x2c, 0x8e, 0xee, 0x63, 0x42, 0x93,
	0xd3, 0xa8, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x6c, 0xc0, 0x8d, 0x39, 0x03, 0x00, 0x00,
}
