// Code generated by protoc-gen-go. DO NOT EDIT.
// source: capsule8/api/v0/subscription.proto

package capsule8_api_v0

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SampleRateType describes the type of sample rate to use, either by the # of
// generated events (SAMPLE_RATE_TYPE_PERIOD) or by time
// (SAMPLE_RATE_TYPE_FREQUENCY), which is expressed in units of kernel timer
// ticks.
type SampleRateType int32

const (
	SampleRateType_SAMPLE_RATE_TYPE_UNKNOWN   SampleRateType = 0
	SampleRateType_SAMPLE_RATE_TYPE_PERIOD    SampleRateType = 1
	SampleRateType_SAMPLE_RATE_TYPE_FREQUENCY SampleRateType = 2
)

var SampleRateType_name = map[int32]string{
	0: "SAMPLE_RATE_TYPE_UNKNOWN",
	1: "SAMPLE_RATE_TYPE_PERIOD",
	2: "SAMPLE_RATE_TYPE_FREQUENCY",
}
var SampleRateType_value = map[string]int32{
	"SAMPLE_RATE_TYPE_UNKNOWN":   0,
	"SAMPLE_RATE_TYPE_PERIOD":    1,
	"SAMPLE_RATE_TYPE_FREQUENCY": 2,
}

func (x SampleRateType) String() string {
	return proto.EnumName(SampleRateType_name, int32(x))
}
func (SampleRateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{0}
}

// The ContainerEventView specifies the level of detail to include for
// ContainerEvents.
type ContainerEventView int32

const (
	// Default view of a ContainerEvent includes just basic information
	ContainerEventView_BASIC ContainerEventView = 0
	// Full view of a ContainerEvent includes raw Docker and OCI config JSON
	// payloads
	ContainerEventView_FULL ContainerEventView = 1
)

var ContainerEventView_name = map[int32]string{
	0: "BASIC",
	1: "FULL",
}
var ContainerEventView_value = map[string]int32{
	"BASIC": 0,
	"FULL":  1,
}

func (x ContainerEventView) String() string {
	return proto.EnumName(ContainerEventView_name, int32(x))
}
func (ContainerEventView) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{1}
}

// Possible interval types
type ThrottleModifier_IntervalType int32

const (
	// milliseconds
	ThrottleModifier_MILLISECOND ThrottleModifier_IntervalType = 0
	// seconds
	ThrottleModifier_SECOND ThrottleModifier_IntervalType = 1
	// minutes
	ThrottleModifier_MINUTE ThrottleModifier_IntervalType = 2
	// hours
	ThrottleModifier_HOUR ThrottleModifier_IntervalType = 3
)

var ThrottleModifier_IntervalType_name = map[int32]string{
	0: "MILLISECOND",
	1: "SECOND",
	2: "MINUTE",
	3: "HOUR",
}
var ThrottleModifier_IntervalType_value = map[string]int32{
	"MILLISECOND": 0,
	"SECOND":      1,
	"MINUTE":      2,
	"HOUR":        3,
}

func (x ThrottleModifier_IntervalType) String() string {
	return proto.EnumName(ThrottleModifier_IntervalType_name, int32(x))
}
func (ThrottleModifier_IntervalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{15, 0}
}

//
// The Subscription message identifies a subscriber's interest in
// telemetry events.
//
type Subscription struct {
	// Return events matching one or more of the specified event
	// filters. If no event filters are specified, then no events
	// will be returned.
	EventFilter *EventFilter `protobuf:"bytes,1,opt,name=event_filter,json=eventFilter,proto3" json:"event_filter,omitempty"`
	// If not empty, then only return events from containers matched
	// by one or more of the specified container filters.
	ContainerFilter *ContainerFilter `protobuf:"bytes,2,opt,name=container_filter,json=containerFilter,proto3" json:"container_filter,omitempty"`
	// If not empty, then only return events that occurred after
	// the specified relative duration subtracted from the current
	// time (recorder time). If the resulting time is in the past, then the
	// subscription will search for historic events before streaming
	// live ones. Sensors do not honor this field.
	SinceDuration *wrappers.Int64Value `protobuf:"bytes,10,opt,name=since_duration,json=sinceDuration,proto3" json:"since_duration,omitempty"`
	// If not empty, then only return events that occurred before
	// the specified relative duration added to `since_duration`.
	// If `since_duration` is not supplied, return events from now and until
	// the specified relative duration is hit. Sensors do not honor this
	// field.
	ForDuration *wrappers.Int64Value `protobuf:"bytes,11,opt,name=for_duration,json=forDuration,proto3" json:"for_duration,omitempty"`
	// If not empty, apply the specified modifier to the subscription.
	Modifier             *Modifier `protobuf:"bytes,20,opt,name=modifier,proto3" json:"modifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{0}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (dst *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(dst, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetEventFilter() *EventFilter {
	if m != nil {
		return m.EventFilter
	}
	return nil
}

func (m *Subscription) GetContainerFilter() *ContainerFilter {
	if m != nil {
		return m.ContainerFilter
	}
	return nil
}

func (m *Subscription) GetSinceDuration() *wrappers.Int64Value {
	if m != nil {
		return m.SinceDuration
	}
	return nil
}

func (m *Subscription) GetForDuration() *wrappers.Int64Value {
	if m != nil {
		return m.ForDuration
	}
	return nil
}

func (m *Subscription) GetModifier() *Modifier {
	if m != nil {
		return m.Modifier
	}
	return nil
}

// The ContainerFilter restricts events in the Subscription to the
// running containers indicated. All of the fields in this message are
// effectively "ORed" together to create the list of containers to
// monitor for the subscription.
type ContainerFilter struct {
	// Zero or more container IDs (e.g.
	// 254dd98a7bf1581560ddace9f98b7933bfb3c2f5fc0504ec1b8dcc9614bc7062)
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// Zero or more container names (e.g. /ecstatic_darwin)
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	// Zero or more container image IDs (e.g.
	// d462265d362c919b7dd37f8ba80caa822d13704695f47c8fc42a1c2266ecd164)
	ImageIds []string `protobuf:"bytes,3,rep,name=image_ids,json=imageIds,proto3" json:"image_ids,omitempty"`
	// Container image name (shell-style globs are supported). May be of the
	// form "busybox", "foo/bar" or
	// "sha256:d462265d362c919b7dd37f8ba80caa822d13704695f47c8fc42a1c2266ecd164"
	ImageNames           []string `protobuf:"bytes,4,rep,name=image_names,json=imageNames,proto3" json:"image_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerFilter) Reset()         { *m = ContainerFilter{} }
func (m *ContainerFilter) String() string { return proto.CompactTextString(m) }
func (*ContainerFilter) ProtoMessage()    {}
func (*ContainerFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{1}
}
func (m *ContainerFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerFilter.Unmarshal(m, b)
}
func (m *ContainerFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerFilter.Marshal(b, m, deterministic)
}
func (dst *ContainerFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerFilter.Merge(dst, src)
}
func (m *ContainerFilter) XXX_Size() int {
	return xxx_messageInfo_ContainerFilter.Size(m)
}
func (m *ContainerFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerFilter proto.InternalMessageInfo

func (m *ContainerFilter) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ContainerFilter) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ContainerFilter) GetImageIds() []string {
	if m != nil {
		return m.ImageIds
	}
	return nil
}

func (m *ContainerFilter) GetImageNames() []string {
	if m != nil {
		return m.ImageNames
	}
	return nil
}

// The EventFilter specifies events to include. All of the specified
// fields are effectively "ORed" together to create the list of events
// included in the Subscription.
type EventFilter struct {
	// Zero or more filters specifying which system calls to include
	SyscallEvents []*SyscallEventFilter `protobuf:"bytes,1,rep,name=syscall_events,json=syscallEvents,proto3" json:"syscall_events,omitempty"`
	// Zero or more filters specifying which process events to include
	ProcessEvents []*ProcessEventFilter `protobuf:"bytes,2,rep,name=process_events,json=processEvents,proto3" json:"process_events,omitempty"`
	// Zero or more filters specifying which file events to include
	FileEvents []*FileEventFilter `protobuf:"bytes,3,rep,name=file_events,json=fileEvents,proto3" json:"file_events,omitempty"`
	// Zero or more kernel function calls to include
	KernelEvents []*KernelFunctionCallFilter `protobuf:"bytes,4,rep,name=kernel_events,json=kernelEvents,proto3" json:"kernel_events,omitempty"`
	// Zero or more network events to include
	NetworkEvents []*NetworkEventFilter `protobuf:"bytes,5,rep,name=network_events,json=networkEvents,proto3" json:"network_events,omitempty"`
	// Zero or more performance events to include
	PerformanceEvents []*PerformanceEventFilter `protobuf:"bytes,6,rep,name=performance_events,json=performanceEvents,proto3" json:"performance_events,omitempty"`
	// Zero or more user function calls to include
	UserEvents []*UserFunctionCallFilter `protobuf:"bytes,7,rep,name=user_events,json=userEvents,proto3" json:"user_events,omitempty"`
	// Zero or more container events to include
	ContainerEvents []*ContainerEventFilter `protobuf:"bytes,10,rep,name=container_events,json=containerEvents,proto3" json:"container_events,omitempty"`
	// Zero or more character generators to configure and return events from
	// (for debugging)
	ChargenEvents []*ChargenEventFilter `protobuf:"bytes,100,rep,name=chargen_events,json=chargenEvents,proto3" json:"chargen_events,omitempty"`
	// Zero or more ticker generators to configure and return events from
	// (for debugging)
	TickerEvents         []*TickerEventFilter `protobuf:"bytes,101,rep,name=ticker_events,json=tickerEvents,proto3" json:"ticker_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventFilter) Reset()         { *m = EventFilter{} }
func (m *EventFilter) String() string { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()    {}
func (*EventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{2}
}
func (m *EventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventFilter.Unmarshal(m, b)
}
func (m *EventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventFilter.Marshal(b, m, deterministic)
}
func (dst *EventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFilter.Merge(dst, src)
}
func (m *EventFilter) XXX_Size() int {
	return xxx_messageInfo_EventFilter.Size(m)
}
func (m *EventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EventFilter proto.InternalMessageInfo

func (m *EventFilter) GetSyscallEvents() []*SyscallEventFilter {
	if m != nil {
		return m.SyscallEvents
	}
	return nil
}

func (m *EventFilter) GetProcessEvents() []*ProcessEventFilter {
	if m != nil {
		return m.ProcessEvents
	}
	return nil
}

func (m *EventFilter) GetFileEvents() []*FileEventFilter {
	if m != nil {
		return m.FileEvents
	}
	return nil
}

func (m *EventFilter) GetKernelEvents() []*KernelFunctionCallFilter {
	if m != nil {
		return m.KernelEvents
	}
	return nil
}

func (m *EventFilter) GetNetworkEvents() []*NetworkEventFilter {
	if m != nil {
		return m.NetworkEvents
	}
	return nil
}

func (m *EventFilter) GetPerformanceEvents() []*PerformanceEventFilter {
	if m != nil {
		return m.PerformanceEvents
	}
	return nil
}

func (m *EventFilter) GetUserEvents() []*UserFunctionCallFilter {
	if m != nil {
		return m.UserEvents
	}
	return nil
}

func (m *EventFilter) GetContainerEvents() []*ContainerEventFilter {
	if m != nil {
		return m.ContainerEvents
	}
	return nil
}

func (m *EventFilter) GetChargenEvents() []*ChargenEventFilter {
	if m != nil {
		return m.ChargenEvents
	}
	return nil
}

func (m *EventFilter) GetTickerEvents() []*TickerEventFilter {
	if m != nil {
		return m.TickerEvents
	}
	return nil
}

// The SyscallEventFilter specifies which system call events to
// include in the Subscription. The specified fields are effectively
// "ANDed" to specify a matching event.
type SyscallEventFilter struct {
	// Required; type of system call event (entry or exit)
	Type             SyscallEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.SyscallEventType" json:"type,omitempty"`
	FilterExpression *Expression      `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	// Required; system call number from
	// arch/x86/entry/syscalls/syscall_64.tbl
	Id *wrappers.Int64Value `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Optional; precise value of a particular system call argument
	Arg0 *wrappers.UInt64Value `protobuf:"bytes,10,opt,name=arg0,proto3" json:"arg0,omitempty"`
	Arg1 *wrappers.UInt64Value `protobuf:"bytes,11,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2 *wrappers.UInt64Value `protobuf:"bytes,12,opt,name=arg2,proto3" json:"arg2,omitempty"`
	Arg3 *wrappers.UInt64Value `protobuf:"bytes,13,opt,name=arg3,proto3" json:"arg3,omitempty"`
	Arg4 *wrappers.UInt64Value `protobuf:"bytes,14,opt,name=arg4,proto3" json:"arg4,omitempty"`
	Arg5 *wrappers.UInt64Value `protobuf:"bytes,15,opt,name=arg5,proto3" json:"arg5,omitempty"`
	// Optional; return value of the system call (if type indicates exit).
	Ret                  *wrappers.Int64Value `protobuf:"bytes,20,opt,name=ret,proto3" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SyscallEventFilter) Reset()         { *m = SyscallEventFilter{} }
func (m *SyscallEventFilter) String() string { return proto.CompactTextString(m) }
func (*SyscallEventFilter) ProtoMessage()    {}
func (*SyscallEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{3}
}
func (m *SyscallEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyscallEventFilter.Unmarshal(m, b)
}
func (m *SyscallEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyscallEventFilter.Marshal(b, m, deterministic)
}
func (dst *SyscallEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyscallEventFilter.Merge(dst, src)
}
func (m *SyscallEventFilter) XXX_Size() int {
	return xxx_messageInfo_SyscallEventFilter.Size(m)
}
func (m *SyscallEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SyscallEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SyscallEventFilter proto.InternalMessageInfo

func (m *SyscallEventFilter) GetType() SyscallEventType {
	if m != nil {
		return m.Type
	}
	return SyscallEventType_SYSCALL_EVENT_TYPE_UNKNOWN
}

func (m *SyscallEventFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

func (m *SyscallEventFilter) GetId() *wrappers.Int64Value {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SyscallEventFilter) GetArg0() *wrappers.UInt64Value {
	if m != nil {
		return m.Arg0
	}
	return nil
}

func (m *SyscallEventFilter) GetArg1() *wrappers.UInt64Value {
	if m != nil {
		return m.Arg1
	}
	return nil
}

func (m *SyscallEventFilter) GetArg2() *wrappers.UInt64Value {
	if m != nil {
		return m.Arg2
	}
	return nil
}

func (m *SyscallEventFilter) GetArg3() *wrappers.UInt64Value {
	if m != nil {
		return m.Arg3
	}
	return nil
}

func (m *SyscallEventFilter) GetArg4() *wrappers.UInt64Value {
	if m != nil {
		return m.Arg4
	}
	return nil
}

func (m *SyscallEventFilter) GetArg5() *wrappers.UInt64Value {
	if m != nil {
		return m.Arg5
	}
	return nil
}

func (m *SyscallEventFilter) GetRet() *wrappers.Int64Value {
	if m != nil {
		return m.Ret
	}
	return nil
}

// The ProcessEventFilter specifies which process events to include in
// the Subscription. The specified fields are effectively "ANDed" to
// specify a matching event.
type ProcessEventFilter struct {
	// Required; the process event type to match
	Type             ProcessEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.ProcessEventType" json:"type,omitempty"`
	FilterExpression *Expression      `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	// Optional; require exact match on the filename passed to execve(2)
	ExecFilename *wrappers.StringValue `protobuf:"bytes,12,opt,name=exec_filename,json=execFilename,proto3" json:"exec_filename,omitempty"`
	// Optional; require pattern match on the filename passed to execve(2)
	ExecFilenamePattern *wrappers.StringValue `protobuf:"bytes,13,opt,name=exec_filename_pattern,json=execFilenamePattern,proto3" json:"exec_filename_pattern,omitempty"`
	// Optional; require exact match on exit code
	ExitCode             *wrappers.Int32Value `protobuf:"bytes,14,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProcessEventFilter) Reset()         { *m = ProcessEventFilter{} }
func (m *ProcessEventFilter) String() string { return proto.CompactTextString(m) }
func (*ProcessEventFilter) ProtoMessage()    {}
func (*ProcessEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{4}
}
func (m *ProcessEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessEventFilter.Unmarshal(m, b)
}
func (m *ProcessEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessEventFilter.Marshal(b, m, deterministic)
}
func (dst *ProcessEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessEventFilter.Merge(dst, src)
}
func (m *ProcessEventFilter) XXX_Size() int {
	return xxx_messageInfo_ProcessEventFilter.Size(m)
}
func (m *ProcessEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessEventFilter proto.InternalMessageInfo

func (m *ProcessEventFilter) GetType() ProcessEventType {
	if m != nil {
		return m.Type
	}
	return ProcessEventType_PROCESS_EVENT_TYPE_UNKNOWN
}

func (m *ProcessEventFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

func (m *ProcessEventFilter) GetExecFilename() *wrappers.StringValue {
	if m != nil {
		return m.ExecFilename
	}
	return nil
}

func (m *ProcessEventFilter) GetExecFilenamePattern() *wrappers.StringValue {
	if m != nil {
		return m.ExecFilenamePattern
	}
	return nil
}

func (m *ProcessEventFilter) GetExitCode() *wrappers.Int32Value {
	if m != nil {
		return m.ExitCode
	}
	return nil
}

// The FileEventFilter specifies which file events to include in the
// Subscription. The specified fields are effectively "ANDed" to
// specify a matching event.
type FileEventFilter struct {
	// Required; the file event type to match
	Type             FileEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.FileEventType" json:"type,omitempty"`
	FilterExpression *Expression   `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	// Optional; require exact match on the filename being acted upon
	Filename *wrappers.StringValue `protobuf:"bytes,10,opt,name=filename,proto3" json:"filename,omitempty"`
	// Optional; require pattern match on the filename being acted upon
	FilenamePattern *wrappers.StringValue `protobuf:"bytes,11,opt,name=filename_pattern,json=filenamePattern,proto3" json:"filename_pattern,omitempty"`
	// Optional; for file open events, require a match of the bits set
	// for the open(2) flags argument
	OpenFlagsMask *wrappers.Int32Value `protobuf:"bytes,12,opt,name=open_flags_mask,json=openFlagsMask,proto3" json:"open_flags_mask,omitempty"`
	// Optional; for file open events, require a match of the bits set
	// for the open(2) or creat(2) mode argument
	CreateModeMask       *wrappers.Int32Value `protobuf:"bytes,13,opt,name=create_mode_mask,json=createModeMask,proto3" json:"create_mode_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FileEventFilter) Reset()         { *m = FileEventFilter{} }
func (m *FileEventFilter) String() string { return proto.CompactTextString(m) }
func (*FileEventFilter) ProtoMessage()    {}
func (*FileEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{5}
}
func (m *FileEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileEventFilter.Unmarshal(m, b)
}
func (m *FileEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileEventFilter.Marshal(b, m, deterministic)
}
func (dst *FileEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileEventFilter.Merge(dst, src)
}
func (m *FileEventFilter) XXX_Size() int {
	return xxx_messageInfo_FileEventFilter.Size(m)
}
func (m *FileEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FileEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FileEventFilter proto.InternalMessageInfo

func (m *FileEventFilter) GetType() FileEventType {
	if m != nil {
		return m.Type
	}
	return FileEventType_FILE_EVENT_TYPE_UNKNOWN
}

func (m *FileEventFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

func (m *FileEventFilter) GetFilename() *wrappers.StringValue {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *FileEventFilter) GetFilenamePattern() *wrappers.StringValue {
	if m != nil {
		return m.FilenamePattern
	}
	return nil
}

func (m *FileEventFilter) GetOpenFlagsMask() *wrappers.Int32Value {
	if m != nil {
		return m.OpenFlagsMask
	}
	return nil
}

func (m *FileEventFilter) GetCreateModeMask() *wrappers.Int32Value {
	if m != nil {
		return m.CreateModeMask
	}
	return nil
}

// The KernelFunctionCallFilter specifies which kernel function call
// events to include in the Subscription. The arguments map defines
// values that will be fetched at each call and returned along with
// the event. In order to minimize event volume, a filter may be
// included that filters the kernel function calls based on the
// observed values of the specified arguments at the time of the
// kernel function call.
type KernelFunctionCallFilter struct {
	// Required; the kernel function call event type to match
	Type KernelFunctionCallEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.KernelFunctionCallEventType" json:"type,omitempty"`
	// Required; the kernel symbol to match on
	Symbol string `protobuf:"bytes,10,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Optional; the field names and data to be returned by the kernel
	// when the event triggers. Note that this is a map. The keys are the
	// names to assign to the returned fields, and the values are a string
	// describing the data to return, usually an expression involving the
	// register containing the desired data and a suffix indicating the
	// type of the data (e.g., "s32", "string", "u64", etc.). This map is
	// used to construct the "fetchargs" passed to the kernel when creating
	// the kernel probe.
	Arguments map[string]string `protobuf:"bytes,11,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional; a filter to apply to kernel probe.
	FilterExpression     *Expression `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KernelFunctionCallFilter) Reset()         { *m = KernelFunctionCallFilter{} }
func (m *KernelFunctionCallFilter) String() string { return proto.CompactTextString(m) }
func (*KernelFunctionCallFilter) ProtoMessage()    {}
func (*KernelFunctionCallFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{6}
}
func (m *KernelFunctionCallFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KernelFunctionCallFilter.Unmarshal(m, b)
}
func (m *KernelFunctionCallFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KernelFunctionCallFilter.Marshal(b, m, deterministic)
}
func (dst *KernelFunctionCallFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KernelFunctionCallFilter.Merge(dst, src)
}
func (m *KernelFunctionCallFilter) XXX_Size() int {
	return xxx_messageInfo_KernelFunctionCallFilter.Size(m)
}
func (m *KernelFunctionCallFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_KernelFunctionCallFilter.DiscardUnknown(m)
}

var xxx_messageInfo_KernelFunctionCallFilter proto.InternalMessageInfo

func (m *KernelFunctionCallFilter) GetType() KernelFunctionCallEventType {
	if m != nil {
		return m.Type
	}
	return KernelFunctionCallEventType_KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN
}

func (m *KernelFunctionCallFilter) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *KernelFunctionCallFilter) GetArguments() map[string]string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *KernelFunctionCallFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

// The UserFunctionCallFilter specifies which user mode function call events to
// include in the Subscription. User mode function call events are functions in
// running user mode binaries that must be specified with both the executable
// name and symbol to monitor. They otherwise work the same as kernel function
// call events. The arguments map defines values that will be fetched at each
// call and returned along with the event. In order to minimize event volume, a
// filter may be included that filters the user function calls based on the
// observed values of the specified arguments at the time of the user function
// call.
type UserFunctionCallFilter struct {
	// Required; the user function call event type to match
	Type UserFunctionCallEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.UserFunctionCallEventType" json:"type,omitempty"`
	// Required; the executable binary in which calls are to be hooked.
	Executable string `protobuf:"bytes,10,opt,name=executable,proto3" json:"executable,omitempty"`
	// Required; the executable symbol to match on
	Symbol string `protobuf:"bytes,11,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Option; the field names and data to be returned by the kernel when
	// the event triggers. Note that this is a map. The keys are the names
	// to assign to the returned fields, and the values are a string
	// describing the data to return, usually an expression involving the
	// register containing the desired data and a suffix indicating the
	// type of the data (e.g., "s32", "string", "u64", etc.). This map is
	// used to construct the "fetchargs" passed to the kernel when creating
	// the user probe.
	Arguments map[string]string `protobuf:"bytes,12,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional; a filter to apply to the user probe.
	FilterExpression     *Expression `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserFunctionCallFilter) Reset()         { *m = UserFunctionCallFilter{} }
func (m *UserFunctionCallFilter) String() string { return proto.CompactTextString(m) }
func (*UserFunctionCallFilter) ProtoMessage()    {}
func (*UserFunctionCallFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{7}
}
func (m *UserFunctionCallFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserFunctionCallFilter.Unmarshal(m, b)
}
func (m *UserFunctionCallFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserFunctionCallFilter.Marshal(b, m, deterministic)
}
func (dst *UserFunctionCallFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFunctionCallFilter.Merge(dst, src)
}
func (m *UserFunctionCallFilter) XXX_Size() int {
	return xxx_messageInfo_UserFunctionCallFilter.Size(m)
}
func (m *UserFunctionCallFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFunctionCallFilter.DiscardUnknown(m)
}

var xxx_messageInfo_UserFunctionCallFilter proto.InternalMessageInfo

func (m *UserFunctionCallFilter) GetType() UserFunctionCallEventType {
	if m != nil {
		return m.Type
	}
	return UserFunctionCallEventType_USER_FUNCTION_CALL_EVENT_TYPE_UNKNOWN
}

func (m *UserFunctionCallFilter) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *UserFunctionCallFilter) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *UserFunctionCallFilter) GetArguments() map[string]string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *UserFunctionCallFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

// The NetworkEventFilter specifies which network events to include in
// the Subscription. The included filter can be used to specify
// precisely which network events should be included.
type NetworkEventFilter struct {
	// Required; the network event type to match
	Type NetworkEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.NetworkEventType" json:"type,omitempty"`
	// Optional; a filter to apply to events. Only events for which the
	// evaluation of the filter expression is true will be returned.
	FilterExpression     *Expression `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NetworkEventFilter) Reset()         { *m = NetworkEventFilter{} }
func (m *NetworkEventFilter) String() string { return proto.CompactTextString(m) }
func (*NetworkEventFilter) ProtoMessage()    {}
func (*NetworkEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{8}
}
func (m *NetworkEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkEventFilter.Unmarshal(m, b)
}
func (m *NetworkEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkEventFilter.Marshal(b, m, deterministic)
}
func (dst *NetworkEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkEventFilter.Merge(dst, src)
}
func (m *NetworkEventFilter) XXX_Size() int {
	return xxx_messageInfo_NetworkEventFilter.Size(m)
}
func (m *NetworkEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkEventFilter proto.InternalMessageInfo

func (m *NetworkEventFilter) GetType() NetworkEventType {
	if m != nil {
		return m.Type
	}
	return NetworkEventType_NETWORK_EVENT_TYPE_UNKNOWN
}

func (m *NetworkEventFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

// PerformanceEventCounter represents a single performance event counter group
// member, where each member may have a different type and configuration.
type PerformanceEventCounter struct {
	// Required; the performance event type.
	Type PerformanceEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.PerformanceEventType" json:"type,omitempty"`
	// Required; the performance event type's configuration, which is
	// defined by the Linux perf interface. This corresponds to the config
	// field in a struct perf_event_attr that is documented in the
	// perf_event_open(2) man page.
	Config               uint64   `protobuf:"varint,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PerformanceEventCounter) Reset()         { *m = PerformanceEventCounter{} }
func (m *PerformanceEventCounter) String() string { return proto.CompactTextString(m) }
func (*PerformanceEventCounter) ProtoMessage()    {}
func (*PerformanceEventCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{9}
}
func (m *PerformanceEventCounter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerformanceEventCounter.Unmarshal(m, b)
}
func (m *PerformanceEventCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerformanceEventCounter.Marshal(b, m, deterministic)
}
func (dst *PerformanceEventCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformanceEventCounter.Merge(dst, src)
}
func (m *PerformanceEventCounter) XXX_Size() int {
	return xxx_messageInfo_PerformanceEventCounter.Size(m)
}
func (m *PerformanceEventCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformanceEventCounter.DiscardUnknown(m)
}

var xxx_messageInfo_PerformanceEventCounter proto.InternalMessageInfo

func (m *PerformanceEventCounter) GetType() PerformanceEventType {
	if m != nil {
		return m.Type
	}
	return PerformanceEventType_PERFORMANCE_EVENT_TYPE_UNKNOWN
}

func (m *PerformanceEventCounter) GetConfig() uint64 {
	if m != nil {
		return m.Config
	}
	return 0
}

// The PerformanceEventFilter specifies which performance events to include in
// the Subscription.
type PerformanceEventFilter struct {
	// Required; the performance events to monitor for. The sensor will
	// create a new group with the order of the events preserved.
	Events []*PerformanceEventCounter `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	// Required; the sample rate type to use, which may be either period or
	// frequency as described for SampleRateType.
	SampleRateType SampleRateType `protobuf:"varint,11,opt,name=sample_rate_type,json=sampleRateType,proto3,enum=capsule8.api.v0.SampleRateType" json:"sample_rate_type,omitempty"`
	// Required; the sample rate to use
	//
	// Types that are valid to be assigned to SampleRate:
	//	*PerformanceEventFilter_Period
	//	*PerformanceEventFilter_Frequency
	SampleRate           isPerformanceEventFilter_SampleRate `protobuf_oneof:"sample_rate"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *PerformanceEventFilter) Reset()         { *m = PerformanceEventFilter{} }
func (m *PerformanceEventFilter) String() string { return proto.CompactTextString(m) }
func (*PerformanceEventFilter) ProtoMessage()    {}
func (*PerformanceEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{10}
}
func (m *PerformanceEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PerformanceEventFilter.Unmarshal(m, b)
}
func (m *PerformanceEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PerformanceEventFilter.Marshal(b, m, deterministic)
}
func (dst *PerformanceEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerformanceEventFilter.Merge(dst, src)
}
func (m *PerformanceEventFilter) XXX_Size() int {
	return xxx_messageInfo_PerformanceEventFilter.Size(m)
}
func (m *PerformanceEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_PerformanceEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_PerformanceEventFilter proto.InternalMessageInfo

func (m *PerformanceEventFilter) GetEvents() []*PerformanceEventCounter {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *PerformanceEventFilter) GetSampleRateType() SampleRateType {
	if m != nil {
		return m.SampleRateType
	}
	return SampleRateType_SAMPLE_RATE_TYPE_UNKNOWN
}

type isPerformanceEventFilter_SampleRate interface {
	isPerformanceEventFilter_SampleRate()
}

type PerformanceEventFilter_Period struct {
	Period uint64 `protobuf:"varint,12,opt,name=period,proto3,oneof"`
}

type PerformanceEventFilter_Frequency struct {
	Frequency uint64 `protobuf:"varint,13,opt,name=frequency,proto3,oneof"`
}

func (*PerformanceEventFilter_Period) isPerformanceEventFilter_SampleRate() {}

func (*PerformanceEventFilter_Frequency) isPerformanceEventFilter_SampleRate() {}

func (m *PerformanceEventFilter) GetSampleRate() isPerformanceEventFilter_SampleRate {
	if m != nil {
		return m.SampleRate
	}
	return nil
}

func (m *PerformanceEventFilter) GetPeriod() uint64 {
	if x, ok := m.GetSampleRate().(*PerformanceEventFilter_Period); ok {
		return x.Period
	}
	return 0
}

func (m *PerformanceEventFilter) GetFrequency() uint64 {
	if x, ok := m.GetSampleRate().(*PerformanceEventFilter_Frequency); ok {
		return x.Frequency
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PerformanceEventFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PerformanceEventFilter_OneofMarshaler, _PerformanceEventFilter_OneofUnmarshaler, _PerformanceEventFilter_OneofSizer, []interface{}{
		(*PerformanceEventFilter_Period)(nil),
		(*PerformanceEventFilter_Frequency)(nil),
	}
}

func _PerformanceEventFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PerformanceEventFilter)
	// sample_rate
	switch x := m.SampleRate.(type) {
	case *PerformanceEventFilter_Period:
		b.EncodeVarint(12<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Period))
	case *PerformanceEventFilter_Frequency:
		b.EncodeVarint(13<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Frequency))
	case nil:
	default:
		return fmt.Errorf("PerformanceEventFilter.SampleRate has unexpected type %T", x)
	}
	return nil
}

func _PerformanceEventFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PerformanceEventFilter)
	switch tag {
	case 12: // sample_rate.period
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SampleRate = &PerformanceEventFilter_Period{x}
		return true, err
	case 13: // sample_rate.frequency
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SampleRate = &PerformanceEventFilter_Frequency{x}
		return true, err
	default:
		return false, nil
	}
}

func _PerformanceEventFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PerformanceEventFilter)
	// sample_rate
	switch x := m.SampleRate.(type) {
	case *PerformanceEventFilter_Period:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Period))
	case *PerformanceEventFilter_Frequency:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Frequency))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The ContainerEventFilter specifies which container lifecycle events
// to include in the Subscription. In order to restrict them to
// specific containers, use the ContainerFilter.
type ContainerEventFilter struct {
	// Required, specify the particular type of event type to match
	Type ContainerEventType `protobuf:"varint,1,opt,name=type,proto3,enum=capsule8.api.v0.ContainerEventType" json:"type,omitempty"`
	// Optional, specifies how much detail to include in container events
	View ContainerEventView `protobuf:"varint,2,opt,name=view,proto3,enum=capsule8.api.v0.ContainerEventView" json:"view,omitempty"`
	// Optional; a filter to apply to events. Only events for which the
	// evaluation of the filter expression is true will be returned.
	FilterExpression     *Expression `protobuf:"bytes,100,opt,name=filter_expression,json=filterExpression,proto3" json:"filter_expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ContainerEventFilter) Reset()         { *m = ContainerEventFilter{} }
func (m *ContainerEventFilter) String() string { return proto.CompactTextString(m) }
func (*ContainerEventFilter) ProtoMessage()    {}
func (*ContainerEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{11}
}
func (m *ContainerEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerEventFilter.Unmarshal(m, b)
}
func (m *ContainerEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerEventFilter.Marshal(b, m, deterministic)
}
func (dst *ContainerEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerEventFilter.Merge(dst, src)
}
func (m *ContainerEventFilter) XXX_Size() int {
	return xxx_messageInfo_ContainerEventFilter.Size(m)
}
func (m *ContainerEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerEventFilter proto.InternalMessageInfo

func (m *ContainerEventFilter) GetType() ContainerEventType {
	if m != nil {
		return m.Type
	}
	return ContainerEventType_CONTAINER_EVENT_TYPE_UNKNOWN
}

func (m *ContainerEventFilter) GetView() ContainerEventView {
	if m != nil {
		return m.View
	}
	return ContainerEventView_BASIC
}

func (m *ContainerEventFilter) GetFilterExpression() *Expression {
	if m != nil {
		return m.FilterExpression
	}
	return nil
}

// The ChargenEventFilter configures a character stream generator and
// includes events from it in the Subscription.
type ChargenEventFilter struct {
	// Required; the length of character sequence strings to generate
	Length               uint64   `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChargenEventFilter) Reset()         { *m = ChargenEventFilter{} }
func (m *ChargenEventFilter) String() string { return proto.CompactTextString(m) }
func (*ChargenEventFilter) ProtoMessage()    {}
func (*ChargenEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{12}
}
func (m *ChargenEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChargenEventFilter.Unmarshal(m, b)
}
func (m *ChargenEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChargenEventFilter.Marshal(b, m, deterministic)
}
func (dst *ChargenEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargenEventFilter.Merge(dst, src)
}
func (m *ChargenEventFilter) XXX_Size() int {
	return xxx_messageInfo_ChargenEventFilter.Size(m)
}
func (m *ChargenEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargenEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ChargenEventFilter proto.InternalMessageInfo

func (m *ChargenEventFilter) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// The TickerEventFilter configures a ticker stream generator and
// includes events from it in the Subscription.
type TickerEventFilter struct {
	// Required; the interval at which ticker events are generated
	Interval             int64    `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TickerEventFilter) Reset()         { *m = TickerEventFilter{} }
func (m *TickerEventFilter) String() string { return proto.CompactTextString(m) }
func (*TickerEventFilter) ProtoMessage()    {}
func (*TickerEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{13}
}
func (m *TickerEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TickerEventFilter.Unmarshal(m, b)
}
func (m *TickerEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TickerEventFilter.Marshal(b, m, deterministic)
}
func (dst *TickerEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickerEventFilter.Merge(dst, src)
}
func (m *TickerEventFilter) XXX_Size() int {
	return xxx_messageInfo_TickerEventFilter.Size(m)
}
func (m *TickerEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TickerEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TickerEventFilter proto.InternalMessageInfo

func (m *TickerEventFilter) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// Modifier specifies which stream modifiers to apply if any. For a given
// stream, a modifier can apply a throttle or limit etc. Modifiers can be
// used together.
type Modifier struct {
	Throttle             *ThrottleModifier `protobuf:"bytes,1,opt,name=throttle,proto3" json:"throttle,omitempty"`
	Limit                *LimitModifier    `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Modifier) Reset()         { *m = Modifier{} }
func (m *Modifier) String() string { return proto.CompactTextString(m) }
func (*Modifier) ProtoMessage()    {}
func (*Modifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{14}
}
func (m *Modifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Modifier.Unmarshal(m, b)
}
func (m *Modifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Modifier.Marshal(b, m, deterministic)
}
func (dst *Modifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Modifier.Merge(dst, src)
}
func (m *Modifier) XXX_Size() int {
	return xxx_messageInfo_Modifier.Size(m)
}
func (m *Modifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Modifier.DiscardUnknown(m)
}

var xxx_messageInfo_Modifier proto.InternalMessageInfo

func (m *Modifier) GetThrottle() *ThrottleModifier {
	if m != nil {
		return m.Throttle
	}
	return nil
}

func (m *Modifier) GetLimit() *LimitModifier {
	if m != nil {
		return m.Limit
	}
	return nil
}

// The ThrottleModifier modulates events sent by the Sensor to one per
// time interval specified.
type ThrottleModifier struct {
	// Required; the interval to use
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Required; the interval type (milliseconds, seconds, etc.)
	IntervalType         ThrottleModifier_IntervalType `protobuf:"varint,2,opt,name=interval_type,json=intervalType,proto3,enum=capsule8.api.v0.ThrottleModifier_IntervalType" json:"interval_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ThrottleModifier) Reset()         { *m = ThrottleModifier{} }
func (m *ThrottleModifier) String() string { return proto.CompactTextString(m) }
func (*ThrottleModifier) ProtoMessage()    {}
func (*ThrottleModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{15}
}
func (m *ThrottleModifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThrottleModifier.Unmarshal(m, b)
}
func (m *ThrottleModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThrottleModifier.Marshal(b, m, deterministic)
}
func (dst *ThrottleModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThrottleModifier.Merge(dst, src)
}
func (m *ThrottleModifier) XXX_Size() int {
	return xxx_messageInfo_ThrottleModifier.Size(m)
}
func (m *ThrottleModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_ThrottleModifier.DiscardUnknown(m)
}

var xxx_messageInfo_ThrottleModifier proto.InternalMessageInfo

func (m *ThrottleModifier) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *ThrottleModifier) GetIntervalType() ThrottleModifier_IntervalType {
	if m != nil {
		return m.IntervalType
	}
	return ThrottleModifier_MILLISECOND
}

// The LimitModifier cancels the subscription on each Sensor after the
// specified number of events. The entire Subscription may return more
// events than this depending on how many active Sensors there are.
type LimitModifier struct {
	// Limit the number of events
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LimitModifier) Reset()         { *m = LimitModifier{} }
func (m *LimitModifier) String() string { return proto.CompactTextString(m) }
func (*LimitModifier) ProtoMessage()    {}
func (*LimitModifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_0d20e7f94e965955, []int{16}
}
func (m *LimitModifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LimitModifier.Unmarshal(m, b)
}
func (m *LimitModifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LimitModifier.Marshal(b, m, deterministic)
}
func (dst *LimitModifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitModifier.Merge(dst, src)
}
func (m *LimitModifier) XXX_Size() int {
	return xxx_messageInfo_LimitModifier.Size(m)
}
func (m *LimitModifier) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitModifier.DiscardUnknown(m)
}

var xxx_messageInfo_LimitModifier proto.InternalMessageInfo

func (m *LimitModifier) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*Subscription)(nil), "capsule8.api.v0.Subscription")
	proto.RegisterType((*ContainerFilter)(nil), "capsule8.api.v0.ContainerFilter")
	proto.RegisterType((*EventFilter)(nil), "capsule8.api.v0.EventFilter")
	proto.RegisterType((*SyscallEventFilter)(nil), "capsule8.api.v0.SyscallEventFilter")
	proto.RegisterType((*ProcessEventFilter)(nil), "capsule8.api.v0.ProcessEventFilter")
	proto.RegisterType((*FileEventFilter)(nil), "capsule8.api.v0.FileEventFilter")
	proto.RegisterType((*KernelFunctionCallFilter)(nil), "capsule8.api.v0.KernelFunctionCallFilter")
	proto.RegisterMapType((map[string]string)(nil), "capsule8.api.v0.KernelFunctionCallFilter.ArgumentsEntry")
	proto.RegisterType((*UserFunctionCallFilter)(nil), "capsule8.api.v0.UserFunctionCallFilter")
	proto.RegisterMapType((map[string]string)(nil), "capsule8.api.v0.UserFunctionCallFilter.ArgumentsEntry")
	proto.RegisterType((*NetworkEventFilter)(nil), "capsule8.api.v0.NetworkEventFilter")
	proto.RegisterType((*PerformanceEventCounter)(nil), "capsule8.api.v0.PerformanceEventCounter")
	proto.RegisterType((*PerformanceEventFilter)(nil), "capsule8.api.v0.PerformanceEventFilter")
	proto.RegisterType((*ContainerEventFilter)(nil), "capsule8.api.v0.ContainerEventFilter")
	proto.RegisterType((*ChargenEventFilter)(nil), "capsule8.api.v0.ChargenEventFilter")
	proto.RegisterType((*TickerEventFilter)(nil), "capsule8.api.v0.TickerEventFilter")
	proto.RegisterType((*Modifier)(nil), "capsule8.api.v0.Modifier")
	proto.RegisterType((*ThrottleModifier)(nil), "capsule8.api.v0.ThrottleModifier")
	proto.RegisterType((*LimitModifier)(nil), "capsule8.api.v0.LimitModifier")
	proto.RegisterEnum("capsule8.api.v0.SampleRateType", SampleRateType_name, SampleRateType_value)
	proto.RegisterEnum("capsule8.api.v0.ContainerEventView", ContainerEventView_name, ContainerEventView_value)
	proto.RegisterEnum("capsule8.api.v0.ThrottleModifier_IntervalType", ThrottleModifier_IntervalType_name, ThrottleModifier_IntervalType_value)
}

func init() {
	proto.RegisterFile("capsule8/api/v0/subscription.proto", fileDescriptor_subscription_0d20e7f94e965955)
}

var fileDescriptor_subscription_0d20e7f94e965955 = []byte{
	// 1479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcd, 0x72, 0xdb, 0xb6,
	0x16, 0xb6, 0x7e, 0xec, 0x2b, 0x1d, 0xea, 0x87, 0xc1, 0xcd, 0x4d, 0x74, 0x9d, 0x8c, 0xe3, 0xcb,
	0x8c, 0xe7, 0x26, 0x69, 0x2a, 0x3b, 0xfe, 0x49, 0xdc, 0x4e, 0x9b, 0xc6, 0x51, 0xe4, 0x58, 0x8d,
	0x2d, 0xab, 0x94, 0xe4, 0x4e, 0x56, 0x1c, 0x9a, 0x82, 0x14, 0x8e, 0x28, 0x92, 0x05, 0x28, 0x3b,
	0x5a, 0xf5, 0x09, 0xba, 0xec, 0xb2, 0x7d, 0x9c, 0x3e, 0x40, 0xa7, 0x33, 0x7d, 0x81, 0xae, 0xf3,
	0x0c, 0x1d, 0x80, 0xa0, 0x44, 0x8a, 0x96, 0xa5, 0x45, 0xb2, 0xe8, 0x8e, 0x38, 0xf8, 0xbe, 0x4f,
	0x07, 0x1f, 0x80, 0x83, 0x23, 0x50, 0x0c, 0xdd, 0xa5, 0x43, 0x0b, 0xef, 0x6f, 0xea, 0xae, 0xb9,
	0x79, 0xb1, 0xb5, 0x49, 0x87, 0xe7, 0xd4, 0x20, 0xa6, 0xeb, 0x99, 0x8e, 0x5d, 0x76, 0x89, 0xe3,
	0x39, 0xa8, 0x18, 0x60, 0xca, 0xba, 0x6b, 0x96, 0x2f, 0xb6, 0x56, 0x37, 0xa6, 0x49, 0x1e, 0xb6,
	0xf0, 0x00, 0x7b, 0x64, 0xa4, 0xe1, 0x0b, 0x6c, 0x7b, 0x3e, 0x6f, 0x75, 0x7d, 0x1a, 0x86, 0xdf,
	0xbb, 0x04, 0x53, 0x3a, 0x56, 0x5e, 0x5d, 0xeb, 0x39, 0x4e, 0xcf, 0xc2, 0x9b, 0x7c, 0x74, 0x3e,
	0xec, 0x6e, 0x5e, 0x12, 0xdd, 0x75, 0x31, 0xa1, 0xfe, 0xbc, 0xf2, 0x67, 0x12, 0x72, 0xcd, 0x50,
	0x42, 0xe8, 0x1b, 0xc8, 0xf1, 0x5f, 0xd0, 0xba, 0xa6, 0xe5, 0x61, 0x52, 0x4a, 0xac, 0x27, 0x1e,
	0x48, 0xdb, 0x77, 0xcb, 0x53, 0x19, 0x96, 0xab, 0x0c, 0x74, 0xc8, 0x31, 0xaa, 0x84, 0x27, 0x03,
	0xf4, 0x06, 0x64, 0xc3, 0xb1, 0x3d, 0xdd, 0xb4, 0x31, 0x09, 0x44, 0x92, 0x5c, 0x64, 0x3d, 0x26,
	0x52, 0x09, 0x80, 0x42, 0xa8, 0x68, 0x44, 0x03, 0xe8, 0x25, 0x14, 0xa8, 0x69, 0x1b, 0x58, 0xeb,
	0x0c, 0x89, 0xce, 0xf2, 0x2b, 0x01, 0x97, 0xba, 0x53, 0xf6, 0xd7, 0x55, 0x0e, 0xd6, 0x55, 0xae,
	0xd9, 0xde, 0xd3, 0xdd, 0x33, 0xdd, 0x1a, 0x62, 0x35, 0xcf, 0x29, 0xaf, 0x04, 0x03, 0x3d, 0x87,
	0x5c, 0xd7, 0x21, 0x13, 0x05, 0x69, 0xbe, 0x82, 0xd4, 0x75, 0xc8, 0x98, 0xbf, 0x07, 0x99, 0x81,
	0xd3, 0x31, 0xbb, 0x26, 0x26, 0xa5, 0x9b, 0x9c, 0xfb, 0xdf, 0xd8, 0x42, 0x4e, 0x04, 0x40, 0x1d,
	0x43, 0x95, 0x4b, 0x28, 0x4e, 0x2d, 0x0f, 0xc9, 0x90, 0x32, 0x3b, 0xb4, 0x94, 0x58, 0x4f, 0x3d,
	0xc8, 0xaa, 0xec, 0x13, 0xdd, 0x84, 0x65, 0x5b, 0x1f, 0x60, 0x5a, 0x4a, 0xf2, 0x98, 0x3f, 0x40,
	0x77, 0x20, 0x6b, 0x0e, 0xf4, 0x1e, 0xd6, 0x18, 0x3a, 0xc5, 0x67, 0x32, 0x3c, 0x50, 0xeb, 0x50,
	0x74, 0x0f, 0x24, 0x7f, 0xd2, 0x27, 0xa6, 0xf9, 0x34, 0xf0, 0x50, 0x9d, 0x45, 0x94, 0x9f, 0x56,
	0x40, 0x0a, 0xed, 0x0e, 0xfa, 0x16, 0x0a, 0x74, 0x44, 0x0d, 0xdd, 0xb2, 0xfc, 0xb3, 0xe3, 0x27,
	0x20, 0x6d, 0xdf, 0x8f, 0xad, 0xa2, 0xe9, 0xc3, 0xc2, 0x5b, 0x9b, 0xa7, 0xa1, 0x18, 0x65, 0x5a,
	0x2e, 0x71, 0x0c, 0x4c, 0x69, 0xa0, 0x95, 0x9c, 0xa1, 0xd5, 0xf0, 0x61, 0x11, 0x2d, 0x37, 0x14,
	0xa3, 0xe8, 0x00, 0xa4, 0xae, 0x69, 0xe1, 0x40, 0x28, 0xc5, 0x85, 0xe2, 0x67, 0xe4, 0xd0, 0xb4,
	0x70, 0x58, 0x05, 0xba, 0x41, 0x80, 0xa2, 0x3a, 0xe4, 0xfb, 0x98, 0xd8, 0x78, 0xbc, 0xb2, 0x34,
	0x17, 0x79, 0x18, 0x13, 0x79, 0xc3, 0x51, 0x87, 0x43, 0xdb, 0x60, 0x5b, 0x5a, 0xd1, 0x2d, 0x4b,
	0xa8, 0xe5, 0x7c, 0xfe, 0x64, 0x79, 0x36, 0xf6, 0x2e, 0x1d, 0xd2, 0x0f, 0x04, 0x97, 0x67, 0x2c,
	0xaf, 0xee, 0xc3, 0x22, 0xcb, 0xb3, 0x43, 0x31, 0x8a, 0xce, 0x00, 0xb9, 0x98, 0x74, 0x1d, 0x32,
	0xd0, 0xd9, 0x01, 0x16, 0x7a, 0x2b, 0x5c, 0xef, 0xff, 0x71, 0xbb, 0x26, 0xd0, 0xb0, 0xe6, 0x0d,
	0x77, 0x2a, 0x4e, 0xd1, 0x11, 0x48, 0x43, 0x8a, 0x49, 0x20, 0xf8, 0xaf, 0x19, 0x82, 0x6d, 0x8a,
	0xc9, 0x15, 0xeb, 0x05, 0xc6, 0x15, 0x4a, 0x8d, 0xf0, 0x4d, 0x15, 0x72, 0xc0, 0xe5, 0x36, 0x66,
	0xdf, 0xd4, 0x70, 0x76, 0x93, 0xeb, 0x3a, 0xf1, 0xcf, 0x78, 0xa7, 0x93, 0x1e, 0xb6, 0x03, 0xbd,
	0xce, 0x0c, 0xff, 0x2a, 0x3e, 0x2c, 0xe2, 0x9f, 0x11, 0x8a, 0x51, 0xf4, 0x1a, 0xf2, 0x9e, 0x69,
	0xf4, 0x27, 0xa9, 0x61, 0x2e, 0xa5, 0xc4, 0xa4, 0x5a, 0x1c, 0x15, 0x56, 0xca, 0x79, 0x93, 0x10,
	0x55, 0x7e, 0x49, 0x03, 0x8a, 0x9f, 0x6c, 0xb4, 0x07, 0x69, 0x6f, 0xe4, 0x62, 0x5e, 0xe0, 0x0a,
	0xdb, 0xff, 0xbb, 0xf6, 0x32, 0xb4, 0x46, 0x2e, 0x56, 0x39, 0x1c, 0x1d, 0xc1, 0x0d, 0xbf, 0xa8,
	0x69, 0x93, 0x5a, 0x5b, 0xea, 0x88, 0x92, 0x12, 0x2b, 0x92, 0x63, 0x88, 0x2a, 0xfb, 0xac, 0x49,
	0x04, 0x7d, 0x06, 0x49, 0xb3, 0x23, 0x4a, 0xe3, 0xb5, 0xd5, 0x28, 0x69, 0x76, 0xd0, 0x16, 0xa4,
	0x75, 0xd2, 0xdb, 0x12, 0xe5, 0xef, 0x6e, 0x0c, 0xde, 0x0e, 0xe1, 0x39, 0x52, 0x30, 0x9e, 0x88,
	0x72, 0x37, 0x9f, 0xf1, 0x44, 0x30, 0xb6, 0x4b, 0xb9, 0x05, 0x19, 0xdb, 0x82, 0xb1, 0x53, 0xca,
	0x2f, 0xc8, 0xd8, 0x11, 0x8c, 0xdd, 0x52, 0x61, 0x41, 0xc6, 0xae, 0x60, 0xec, 0x95, 0x8a, 0x0b,
	0x32, 0xf6, 0xd0, 0xe7, 0x90, 0x22, 0xd8, 0x13, 0xb5, 0xfa, 0x5a, 0x67, 0x19, 0x4e, 0xf9, 0x2b,
	0x09, 0x28, 0x5e, 0xad, 0xe6, 0x9e, 0x8f, 0x30, 0xe5, 0x93, 0x9c, 0x8f, 0x03, 0xc8, 0xe3, 0xf7,
	0xd8, 0x60, 0x6f, 0x28, 0x66, 0xb5, 0x7e, 0xe6, 0xbe, 0x34, 0x3d, 0x62, 0xda, 0x3d, 0x7f, 0x45,
	0x39, 0x46, 0x39, 0x14, 0x0c, 0xd4, 0x80, 0xff, 0x44, 0x24, 0x34, 0x57, 0xf7, 0x3c, 0x4c, 0xec,
	0x99, 0x1b, 0x16, 0x96, 0xfa, 0x77, 0x58, 0xaa, 0xe1, 0x13, 0xd1, 0x3e, 0x64, 0xf1, 0x7b, 0xd3,
	0xd3, 0x0c, 0xa7, 0x83, 0xc5, 0x26, 0x5e, 0xe9, 0xf0, 0xce, 0xb6, 0x2f, 0x92, 0x61, 0xe8, 0x8a,
	0xd3, 0xc1, 0xca, 0xaf, 0x29, 0x28, 0x4e, 0xd5, 0x72, 0xb4, 0x1d, 0xf1, 0x78, 0x6d, 0x76, 0xed,
	0xff, 0x24, 0x06, 0xef, 0x43, 0x66, 0xec, 0x2d, 0x2c, 0x60, 0xc8, 0x18, 0x8d, 0x5e, 0x83, 0x1c,
	0xb3, 0x54, 0x5a, 0x40, 0xa1, 0xd8, 0x9d, 0xb2, 0xb3, 0x02, 0x45, 0xc7, 0xc5, 0xb6, 0xd6, 0xb5,
	0xf4, 0x1e, 0xd5, 0x06, 0x3a, 0xed, 0x8b, 0x5d, 0xbe, 0xd6, 0xd4, 0x3c, 0xe3, 0x1c, 0x32, 0xca,
	0x89, 0x4e, 0xfb, 0xa8, 0x0a, 0xb2, 0x41, 0xb0, 0xee, 0x61, 0x6d, 0xe0, 0x74, 0xb0, 0xaf, 0x92,
	0x9f, 0xaf, 0x52, 0xf0, 0x49, 0x27, 0x4e, 0x07, 0x33, 0x19, 0xe5, 0x8f, 0x24, 0x94, 0x66, 0xbd,
	0x93, 0xe8, 0x45, 0x64, 0xa7, 0x1e, 0x2f, 0xf0, 0xc0, 0x4e, 0xef, 0xdb, 0x2d, 0x58, 0xa1, 0xa3,
	0xc1, 0xb9, 0x63, 0x71, 0xaf, 0xb3, 0xaa, 0x18, 0xa1, 0x33, 0xc8, 0xea, 0xa4, 0x37, 0x1c, 0xf0,
	0x1a, 0x2f, 0xf1, 0x1a, 0xbf, 0xbf, 0xf0, 0xfb, 0x5d, 0x3e, 0x08, 0xa8, 0x55, 0xdb, 0x23, 0x23,
	0x75, 0x22, 0xf5, 0xf1, 0xce, 0xc9, 0xea, 0x57, 0x50, 0x88, 0xfe, 0x0c, 0x6b, 0xe4, 0xfa, 0x78,
	0xc4, 0xcd, 0xc8, 0xaa, 0xec, 0x93, 0x35, 0x72, 0x17, 0xcc, 0x55, 0x5e, 0xcf, 0xb3, 0xaa, 0x3f,
	0xf8, 0x32, 0xb9, 0x9f, 0x50, 0x3e, 0x24, 0xe1, 0xd6, 0xd5, 0x8f, 0x31, 0x7a, 0x1e, 0x31, 0xf5,
	0xd1, 0xdc, 0x37, 0x7c, 0xda, 0xd2, 0x35, 0x00, 0x76, 0x47, 0x87, 0x9e, 0x7e, 0x6e, 0x61, 0x61,
	0x6b, 0x28, 0x12, 0xb2, 0x5c, 0x8a, 0x58, 0xde, 0x0a, 0x5b, 0x9e, 0xe3, 0x96, 0x3f, 0x5d, 0xb0,
	0x81, 0xf8, 0x07, 0x18, 0xfe, 0x73, 0x02, 0x50, 0xbc, 0x3d, 0x9b, 0x5b, 0xcf, 0xc3, 0x94, 0x4f,
	0x51, 0x6e, 0x14, 0x0b, 0x6e, 0x4f, 0x77, 0x79, 0x15, 0x67, 0x68, 0xb3, 0xdc, 0xbe, 0x88, 0xe4,
	0xb6, 0x31, 0xb7, 0x3b, 0x8c, 0x5e, 0x2b, 0xc3, 0xb1, 0xbb, 0x66, 0x8f, 0x1b, 0x91, 0x56, 0xc5,
	0x48, 0xf9, 0x90, 0x80, 0x5b, 0x57, 0x37, 0x95, 0xe8, 0x05, 0xac, 0x44, 0xba, 0xbd, 0x07, 0x73,
	0x7f, 0x4f, 0xe4, 0xa9, 0x0a, 0x1e, 0xaa, 0x81, 0x4c, 0xf5, 0x81, 0x6b, 0x61, 0x8d, 0xb0, 0xb2,
	0xc3, 0x73, 0x97, 0x78, 0xee, 0xf7, 0xe2, 0x7d, 0x14, 0x07, 0xaa, 0xba, 0x87, 0x79, 0xd6, 0x05,
	0x1a, 0x19, 0xa3, 0x12, 0xac, 0xb8, 0x98, 0x98, 0x4e, 0x87, 0x17, 0xbe, 0xf4, 0xd1, 0x92, 0x2a,
	0xc6, 0x68, 0x0d, 0xb2, 0x5d, 0x82, 0x7f, 0x18, 0x62, 0xdb, 0x18, 0xf1, 0x7a, 0xc6, 0x26, 0x27,
	0xa1, 0x97, 0x79, 0x90, 0x42, 0x49, 0x28, 0xbf, 0x27, 0xe0, 0xe6, 0x55, 0x5d, 0x2a, 0x7a, 0x16,
	0x31, 0xf7, 0xfe, 0x9c, 0xd6, 0x36, 0x64, 0xed, 0x33, 0x48, 0x5f, 0x98, 0xf8, 0x92, 0x1b, 0x3b,
	0x9f, 0x78, 0x66, 0xe2, 0x4b, 0x95, 0x13, 0x3e, 0xe2, 0x99, 0x79, 0x0c, 0x28, 0xde, 0x29, 0xb3,
	0x3d, 0xb7, 0xb0, 0xdd, 0xf3, 0xde, 0xf1, 0x35, 0xa5, 0x55, 0x31, 0x52, 0x36, 0xe1, 0x46, 0xac,
	0x19, 0x46, 0xab, 0x90, 0x31, 0xd9, 0xe6, 0x5d, 0xe8, 0x16, 0x87, 0xa7, 0xd4, 0xf1, 0x58, 0xf9,
	0x11, 0x32, 0xc1, 0x3f, 0x57, 0xf4, 0x35, 0x64, 0xbc, 0x77, 0xc4, 0xf1, 0x3c, 0x0b, 0x8b, 0x3f,
	0xfd, 0xf1, 0x3b, 0xd2, 0x12, 0x80, 0xc9, 0xdf, 0xdd, 0x80, 0x82, 0x76, 0x61, 0xd9, 0x32, 0x07,
	0xa6, 0x27, 0x1a, 0xda, 0xf8, 0x5b, 0x7e, 0xcc, 0x66, 0xc7, 0x44, 0x1f, 0xac, 0xfc, 0x96, 0x00,
	0x79, 0x5a, 0xf4, 0xba, 0x8c, 0x51, 0x13, 0xf2, 0xc1, 0xb7, 0x7f, 0xec, 0xfc, 0xcd, 0x29, 0xcf,
	0x4d, 0x95, 0xbd, 0x7c, 0x9c, 0xc6, 0x37, 0x38, 0x67, 0x86, 0x46, 0xca, 0x01, 0xe4, 0xc2, 0xb3,
	0xa8, 0x08, 0xd2, 0x49, 0xed, 0xf8, 0xb8, 0xd6, 0xac, 0x56, 0x4e, 0xeb, 0xaf, 0xe4, 0x25, 0x04,
	0xb0, 0x22, 0xbe, 0x13, 0xec, 0xfb, 0xa4, 0x56, 0x6f, 0xb7, 0xaa, 0x72, 0x12, 0x65, 0x20, 0x7d,
	0x74, 0xda, 0x56, 0xe5, 0x94, 0xb2, 0x01, 0xf9, 0xc8, 0x02, 0x59, 0x7d, 0xf2, 0xfd, 0xf0, 0x57,
	0xe0, 0x0f, 0x1e, 0xf5, 0xa1, 0x10, 0xbd, 0x0f, 0xe8, 0x2e, 0x94, 0x9a, 0x07, 0x27, 0x8d, 0xe3,
	0xaa, 0xa6, 0x1e, 0xb4, 0xaa, 0x5a, 0xeb, 0x6d, 0xa3, 0xaa, 0xb5, 0xeb, 0x6f, 0xea, 0xa7, 0xdf,
	0xd7, 0xe5, 0x25, 0x74, 0x07, 0x6e, 0xc7, 0x66, 0x1b, 0x55, 0xb5, 0x76, 0xca, 0x32, 0x59, 0x83,
	0xd5, 0xd8, 0xe4, 0xa1, 0x5a, 0xfd, 0xae, 0x5d, 0xad, 0x57, 0xde, 0xca, 0xc9, 0x47, 0x0f, 0x01,
	0xc5, 0x8f, 0x28, 0xca, 0xc2, 0xf2, 0xcb, 0x83, 0x66, 0xad, 0x22, 0x2f, 0xb1, 0xf4, 0x0f, 0xdb,
	0xc7, 0xc7, 0x72, 0xe2, 0x7c, 0x85, 0x37, 0x08, 0x3b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0x60, 0x0a, 0x34, 0xad, 0x12, 0x00, 0x00,
}
