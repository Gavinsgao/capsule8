// Copyright 2017 Capsule8, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package capsule8.api.v0;

import "capsule8/api/v0/types.proto";

// An event observed by the Sensor.
message TelemetryEvent {
        // Unique identifier for the event
        string id = 1;

        // Unique process identifier associated with the event to differentiate
        // reused values of the pid below.
        string process_id = 2;

        // Kernel's PID of the task associated with the event. This
        // corresponds the userland's TID.
        int32 process_pid = 3;

        // Container identifier associated with the event
        string container_id = 4;

        // Sensor identifier of the sensor instance that observed the event
        string sensor_id = 5;

        // Sequence number from some unspecified starting point unique
        // to the Sensor. Provides a strict linear ordering of events with
        // the same sensor_id where no two events can have the same sequence
        // number. If it is present, it must be greater than zero. A zero
        // value indicates that there is no sequence number associated with
        // the event.
        uint64 sensor_sequence_number = 6;

        // Monotonic nanosecond timestamp from some unspecified starting
        // point unique to the Sensor. Can only be used to calculate time
        // intervals between events with the same sensor_id.
        int64 sensor_monotime_nanos = 7;

        // Process Lineage contains one process context for each process in the
        // hierarchy, starting with the current process, up to the root of the
        // process namespace.
        repeated Process process_lineage = 8;

        // Name of container associated with the event
        string container_name = 30;

        // Unique identifier of the container image
        string image_id = 31;

        //
        // Name of the container image (i.e. "busybox" or
        // "gcr.io/google_containers/nginx-ingress-controller")
        //
        string image_name = 32;

        oneof event {
                //
                // Kernel-level events
                //

                SyscallEvent syscall                = 10;
                ProcessEvent process                = 11;
                FileEvent file                      = 12;
                KernelFunctionCallEvent kernel_call = 13;
                NetworkEvent network                = 14;
                PerformanceEvent performance        = 15;
                UserFunctionCallEvent user_call     = 16;

                //
                // System-level events (containers, systemd, etc)
                //

                ContainerEvent container = 20;

                //
                // Debugging events (>= 100)
                //
                ChargenEvent chargen = 100;
                TickerEvent ticker   = 101;
                LostRecordEvent lost = 102;
        }

        // Unix tid of the process thread associated with event
        // Deprecated since pid really is the tid.
        // int32 process_tid = 200;
        reserved "process_tid";
        reserved 200;

        // CPU on which the event occurred
        int32 cpu = 201;

        // Credentials for the process associated with the event
        Credentials credentials = 202;

        // Kernel's TGID of the task associated with the event. This
        // corresponds the userland's PID.
        int32 process_tgid = 203;
}

message ChargenEvent {
        // Index of the first character in this Event in relation to all of
        // the characters that have been generated in this stream.
        uint64 index = 1;

        // The next one or more characters in the autogenerated stream
        string characters = 2;
}

message TickerEvent {
        // The number of seconds elapsed since January 1, 1970 UTC.
        //
        // https://golang.org/pkg/time/#Time.Unix
        int64 seconds = 1;

        // The number of nanoseconds elapsed since January 1, 1970 UTC
        //
        // https://golang.org/pkg/time/#Time.UnixNano
        int64 nanoseconds = 2;
}

enum LostRecordEventType {
        // LOST_RECORD_EVENT_TYPE_UNKNOWN is a lost record of unknown type.
        LOST_RECORD_EVENT_TYPE_UNKNOWN = 0;
        // LOST_RECORD_EVENT_TYPE_SUBSCRIPTION is a lost record from a
        // subscription. It may include kprobes, uprobes, network events,
        // syscalls, etc. but it does not include meta events like process,
        // container, or file monitoring events. This type is only ever sent to
        // a specific subscription that has lost a kernel generated event.
        LOST_RECORD_EVENT_TYPE_SUBSCRIPTION = 1;
        // LOST_RECORD_EVENT_TYPE_PROCESS is a lost record relating to process
        // meta events. This type is broadcast to all subscriptions, regardless
        // of whether they've explicitly subscribed to process events or not,
        // because it affects everything.
        LOST_RECORD_EVENT_TYPE_PROCESS = 2;
        // LOST_RECORD_EVENT_TYPE_CONTAINER is a lost record relating to
        // container meta events. This type is broadcast to all subscriptions,
        // regardless of whether they've explicitly subscribed to process events
        // or not, because it affects everything.
        LOST_RECORD_EVENT_TYPE_CONTAINER = 3;
        // LOST_RECORD_EVENT_TYPE_FILE_CREATE is a lost record relating to file
        // create events. It is only sent to subscriptions that are subscribed
        // to file create events.
        LOST_RECORD_EVENT_TYPE_FILE_CREATE = 4;
        // LOST_RECORD_EVENT_TYPE_FILE_DELETE is a lost record relating to file
        // delete events. It is only sent to subscriptions that are subscribed
        // to file delete events.
        LOST_RECORD_EVENT_TYPE_FILE_DELETE = 5;
        // LOST_RECORD_EVENT_TYPE_FILE_LINK is a lost record relating to file
        // link events. It is only sent to subscriptions that are subscribed to
        // file link events.
        LOST_RECORD_EVENT_TYPE_FILE_LINK = 6;
        // LOST_RECORD_EVENT_TYPE_FILE_SYMLINK is a lost record relating to file
        // symlink events. It is only sent to subscriptions that are subscribed
        // to file link events.
        LOST_RECORD_EVENT_TYPE_FILE_SYMLINK = 7;
        // LOST_RECORD_EVENT_TYPE_FILE_OPEN_MODIFY is a lost record relating to
        // file open modify events. It is only sent to subscriptions that are
        // subscribed to file open modify events.
        LOST_RECORD_EVENT_TYPE_FILE_OPEN_MODIFY = 8;
        // LOST_RECORD_EVENT_TYPE_FILE_CLOSE_MODIY is a lost record relating to
        // file close modify events. It is only sent to subscriptions that are
        // subscribed to file close modify events.
        LOST_RECORD_EVENT_TYPE_FILE_CLOSE_MODIFY = 9;
        // LOST_RECORD_EVENT_TYPE_FILE_MODIFY is a lost record relating to file
        // modify events. It is only sent to subscriptions that are subscribed
        // to file modify events.
        LOST_RECORD_EVENT_TYPE_FILE_MODIFY = 10;
        // LOST_RECORD_EVENT_TYPE_FILE_RENAME is a lost record relating to file
        // rename events. It is only sent to subscriptions that are subscribed
        // to file rename events.
        LOST_RECORD_EVENT_TYPE_FILE_RENAME = 11;
        // LOST_RECORD_EVENT_TYPE_FILE_ATTRIBUTE_CHANGE is a lost record
        // relating to file attribute change events. It is only sent to
        // subscriptions that are subscribed to file attribute change events.
        LOST_RECORD_EVENT_TYPE_FILE_ATTRIBUTE_CHANGE = 12;
}

message LostRecordEvent {
        // Number of lost records observed
        uint64 lost = 1;

        // Type of events lost
        LostRecordEventType type = 2;
}

enum ContainerEventType {
        CONTAINER_EVENT_TYPE_UNKNOWN   = 0;
        CONTAINER_EVENT_TYPE_CREATED   = 1;
        CONTAINER_EVENT_TYPE_RUNNING   = 2;
        CONTAINER_EVENT_TYPE_EXITED    = 3;
        CONTAINER_EVENT_TYPE_DESTROYED = 4;
        CONTAINER_EVENT_TYPE_UPDATED   = 5;
}

// ContainerEvent describes a Docker container or Rkt App lifecycle event
message ContainerEvent {
        ContainerEventType type = 1;
        string name             = 2;

        //
        // The fields below are state-dependent and may not always be present
        //

        // Unique identifier of the container image
        string image_id = 10;

        //
        // Name of the container image (i.e. "busybox" or
        // "gcr.io/google_containers/nginx-ingress-controller")
        //
        string image_name = 11;

        // Host process identifier of the container's init process.
        sint32 host_pid = 20;

        // Optional, only included on CONTAINER_EVENT_TYPE_EXIT events
        sint32 exit_code = 30;

        // The exit status will typically one of the values defined in
        // stdlib.h like EXIT_SUCCESS, EXIT_FAILURE, or EXIT_USAGE.
        uint32 exit_status = 31;

        // If non-zero, this is the signal number that the process
        // was terminated with.
        uint32 exit_signal = 32;

        // If true, indicates that the process dumped a core when
        // it terminated.
        bool exit_core_dumped = 33;

        // Docker container configuration file
        string docker_config_json = 100;

        // OCI container configuration file
        string oci_config_json = 101;
}

// Possible ProcessEvent types
enum ProcessEventType {
        // The type of event is unknown
        PROCESS_EVENT_TYPE_UNKNOWN = 0;

        // The event is a process fork event
        PROCESS_EVENT_TYPE_FORK = 1;

        // The event is a process exec event
        PROCESS_EVENT_TYPE_EXEC = 2;

        // The event is a process exit event
        PROCESS_EVENT_TYPE_EXIT = 3;

        // The event is a process update event
        PROCESS_EVENT_TYPE_UPDATE = 4;
}

// ProcessEvent describes an event that occurred related to processes starting
// and exiting as detected by the Sensor.
message ProcessEvent {
        // The type of event described by this ProcessEvent message
        ProcessEventType type = 1;

        // Present when the event is a fork event. This is the PID of the
        // new child process.
        sint32 fork_child_pid = 10;

        // Present when the event is a fork event. This is the Sensor's process
        // ID of the new child process.
        string fork_child_id = 11;

        // Present when the event is a fork event. This is the flags parameter
        // passed to sys_clone.
        uint64 fork_clone_flags = 12;

        // Present when the event is a fork event. This is the stack_start
        // parameter passed to sys_clone.
        uint64 fork_stack_start = 13;

        // Present when the event is an exec event. This is the filename of the
        // executable that was executed.
        string exec_filename = 20;

        // Present when the event is an exec event. Repeated for each argument
        // passed to the executable on the command-line.
        repeated string exec_command_line = 21;

        // Present when the event is an exit event. This is the exit code that
        // the process exited with.
        sint32 exit_code = 30;

        // Present when the event is an exit event. This will typically be one9
        // of the values defined in stdlib.h like EXIT_SUCCESS, EXIT_FAILURE,
        // or EXIT_USAGE.
        uint32 exit_status = 31;

        // Present when the event is an exit event. If non-zero, this is the
        // signal number that the process was terminated with.
        uint32 exit_signal = 32;

        // Present when the event is an exit event. If true, indicates that the
        // process dumped a core when it terminated.
        bool exit_core_dumped = 33;

        // Present when the event is an update event that informs of an update
        // to the process's current working directory.
        string update_cwd = 40;
}

// Possible SyscallEvent types
enum SyscallEventType {
        // The type of event is unknown
        SYSCALL_EVENT_TYPE_UNKNOWN = 0;

        // The event is a syscall enter event
        SYSCALL_EVENT_TYPE_ENTER = 1;

        // The event is a syscall exit event
        SYSCALL_EVENT_TYPE_EXIT = 2;
}

// SyscallEvent describes an event that occurred related to system calls being
// made or returning as detected by the Sensor.
message SyscallEvent {
        // The type of event described by this SyscallEvent message
        SyscallEventType type = 1;

        // The syscall number for either enter or exit events.
        int64 id = 2;

        // Present when the event is an enter event. This is the first
        // argument passed to the system call.
        uint64 arg0 = 10;

        // Present when the event is an enter event. This is the second
        // argument passed to the system call.
        uint64 arg1 = 11;

        // Present when the event is an enter event. This is the third
        // argument passed to the system call.
        uint64 arg2 = 12;

        // Present when the event is an enter event. This is the fourth
        // argument passed to the system call.
        uint64 arg3 = 13;

        // Present when the event is an enter event. This is the fifth
        // argument passed to the system call.
        uint64 arg4 = 14;

        // Present when the event is an enter event. This is the sixth
        // argument passed to the system call.
        uint64 arg5 = 15;

        // Present when the event is an exit event. This is the value that was
        // returned from the system call.
        int64 ret = 20;
}

// Possible FileEvent types
enum FileEventType {
        // The type of event is unknown
        FILE_EVENT_TYPE_UNKNOWN = 0;

        // The event is a file open event
        FILE_EVENT_TYPE_OPEN = 1;

        // The event is a file create event
        FILE_EVENT_TYPE_CREATE = 2;

        // The event is a file delete event
        FILE_EVENT_TYPE_DELETE = 3;

        // The event is a file link event
        FILE_EVENT_TYPE_LINK = 4;

        // The event is a file open for modify event
        FILE_EVENT_TYPE_OPEN_FOR_MODIFY = 5;

        // The event is a file rename event
        FILE_EVENT_TYPE_RENAME = 6;

        // The event is a file modify event
        FILE_EVENT_TYPE_MODIFY = 7;

        // The event is a file close for modify event
        FILE_EVENT_TYPE_CLOSE_FOR_MODIFY = 8;

        // The event is a attribute change event
        FILE_EVENT_TYPE_ATTRIBUTE_CHANGE = 9;
}

// FileEvent describes an event that occurred related to file operations
// occurring as detected by the Sensor.
message FileEvent {
        // The type of event described by this FileEvent message
        FileEventType type = 1;

        // Present when the event is a file create, delete, link, modify, or
        // open event. This is the filename of the file being affected.
        string filename = 10;

        // Present when the event is a file open event. This is the set of
        // flags with which the file was opened (e.g., O_RDONLY, O_NONBLOCK,
        // etc.).
        sint32 open_flags = 11;

        // Present when the event is a file create or open event. This is the
        // set of file permissions used in a creat(2) system call.
        sint32 open_mode = 12;

        // Present when the event is a file link event. This is the name of the
        // file being linked to.
        string source_file = 13;

        // Present when the event is a file link event. This is the name of the
        // file linking to source the source file.
        string target_file = 14;

        // Present when the event is a file link event. This is true if the
        // link is a symlink; otherwise, it is a hard link.
        bool symlink = 15;

        // Present when the event is a file rename event. This is the original
        // name of the file being renamed.
        string oldname = 16;

        // Present when the event is a file rename event. This is the new name
        // of the file being renamed.
        string newname = 17;
}

message Process {
        sint32 pid     = 1;
        string command = 2;
}

// Possible KernelFunctionCallEvent types
enum KernelFunctionCallEventType {
        // The type of event is unknown
        KERNEL_FUNCTION_CALL_EVENT_TYPE_UNKNOWN = 0;

        // The event is a kernel function being entered.
        KERNEL_FUNCTION_CALL_EVENT_TYPE_ENTER = 1;

        // The event is a kernel function being exited.
        KERNEL_FUNCTION_CALL_EVENT_TYPE_EXIT = 2;
}

// KernelFunctionCallEvent describes an event that occurred related to kernel
// functions being entered or exited.
message KernelFunctionCallEvent {
        // Possible field types
        enum FieldType {
                // The field type is unknown
                UNKNOWN = 0;

                // The field type is an array of bytes
                BYTES = 1;

                // The field type is a string
                STRING = 2;

                // The field type is a signed 8-bit integer
                SINT8 = 3;

                // The field type is a signed 16-bit integer
                SINT16 = 4;

                // The field type is a signed 32-bit integer
                SINT32 = 5;

                // The field type is a signed 64-bit integer
                SINT64 = 6;

                // The field type is an unsigned 8-bit integer
                UINT8 = 7;

                // The field type is an unsigned 16-bit integer
                UINT16 = 8;

                // The field type is an unsigned 32-bit integer
                UINT32 = 9;

                // The field type is an unsigned 64-bit integer
                UINT64 = 10;
        }

        // The representation of a field value, which is composed of type
        // information and the value itself.
        message FieldValue {
                // The type represented by this field value.
                FieldType field_type = 1;

                oneof value {
                        // An array of bytes
                        bytes bytes_value = 2;

                        // A string
                        string string_value = 3;

                        // A signed value (8-bit, 16-bit, 32-bit, or 64-bit)
                        sint64 signed_value = 4;

                        // An unsigned value (8-bit, 16--bit, 32-bit, or 64-bit)
                        uint64 unsigned_value = 5;
                };
        };

        // This is a map of argument names and values. The keys are strings
        // that are the names of the arguments, and the values are the actual
        // values for each field.
        map<string, FieldValue> arguments = 1;
}

// Possible UserFunctionCallEvent types
enum UserFunctionCallEventType {
        // The type of event is unknown
        USER_FUNCTION_CALL_EVENT_TYPE_UNKNOWN = 0;

        // The event is a user function being entered.
        USER_FUNCTION_CALL_EVENT_TYPE_ENTER = 1;

        // The event is a user function being exited.
        USER_FUNCTION_CALL_EVENT_TYPE_EXIT = 2;
}

// UserFunctionCallEvent describes an event that occurred related to user
// functions being entered or exited.
message UserFunctionCallEvent {
        // Possible field types
        enum FieldType {
                // The field type is unknown
                UNKNOWN = 0;

                // The field type is an array of bytes
                BYTES = 1;

                // The field type is a string
                STRING = 2;

                // The field type is a signed 8-bit integer
                SINT8 = 3;

                // The field type is a signed 16-bit integer
                SINT16 = 4;

                // The field type is a signed 32-bit integer
                SINT32 = 5;

                // The field type is a signed 64-bit integer
                SINT64 = 6;

                // The field type is an unsigned 8-bit integer
                UINT8 = 7;

                // The field type is an unsigned 16-bit integer
                UINT16 = 8;

                // The field type is an unsigned 32-bit integer
                UINT32 = 9;

                // The field type is an unsigned 64-bit integer
                UINT64 = 10;
        }

        // The representation of a field value, which is composed of type
        // information and the value itself.
        message FieldValue {
                // The type represented by this field value.
                FieldType field_type = 1;

                oneof value {
                        // An array of bytes
                        bytes bytes_value = 2;

                        // A string
                        string string_value = 3;

                        // A signed value (8-bit, 16-bit, 32-bit, or 64-bit)
                        sint64 signed_value = 4;

                        // An unsigned value (8-bit, 16--bit, 32-bit, or 64-bit)
                        uint64 unsigned_value = 5;
                };
        };

        // This is a map of argument names and values. The keys are strings
        // that are the names of the arguments, and the values are the actual
        // values for each field.
        map<string, FieldValue> arguments = 1;
}

// Possible network event types
enum NetworkEventType {
        // The type of event is unknown
        NETWORK_EVENT_TYPE_UNKNOWN = 0;

        // The event is an attempt to connect to an address
        NETWORK_EVENT_TYPE_CONNECT_ATTEMPT = 1;

        // The event is the result of an attempt to connect to an address
        NETWORK_EVENT_TYPE_CONNECT_RESULT = 2;

        // The event is an attempt to bind to a local address
        NETWORK_EVENT_TYPE_BIND_ATTEMPT = 3;

        // The event is the result of an attempt to bind to a local address
        NETWORK_EVENT_TYPE_BIND_RESULT = 4;

        // The event is an attempt to listen for connections
        NETWORK_EVENT_TYPE_LISTEN_ATTEMPT = 5;

        // The event is the result of an attempt to listen for connections
        NETWORK_EVENT_TYPE_LISTEN_RESULT = 6;

        // The event is an attempt to accept an incoming connection
        NETWORK_EVENT_TYPE_ACCEPT_ATTEMPT = 7;

        // The event is the result of an attempt to accept an incoming
        // connection
        NETWORK_EVENT_TYPE_ACCEPT_RESULT = 8;

        // The event is an attempt to send data to a specific address
        NETWORK_EVENT_TYPE_SENDTO_ATTEMPT = 9;

        // The event is the result of an attempt to send data to a specific
        // address
        NETWORK_EVENT_TYPE_SENDTO_RESULT = 10;

        // The event is an attempt to receive data from a specific address
        NETWORK_EVENT_TYPE_RECVFROM_ATTEMPT = 11;

        // The event is the result of an attempt to receive data from a
        // specific address
        NETWORK_EVENT_TYPE_RECVFROM_RESULT = 12;
}

// NetworkEvent describes an event that occurred related to network activity
// occurring as detected by the Sensor.
message NetworkEvent {
        // The type of event described by this NetworkEvent message.
        NetworkEventType type = 1;

        // Present when the event describes a network event that is an attempt
        // to perform a network related action. This is the socket descriptor
        // used to perform the action.
        uint64 sockfd = 10;

        // Present when the event describes a network event that is an attempt
        // to perform a network related action that includes an address. This
        // is that address.
        NetworkAddress address = 11;

        // Present when the event describes a network event that is the result
        // of an attempted network related action. This is the return code from
        // the system call.
        sint64 result = 12;

        // Present only when the event describes a listen attempt. This is the
        // value of the backlog argument passed to listen(2).
        uint64 backlog = 13;
}

// Possible performance event types
enum PerformanceEventType {
        // The type of event is unknown
        PERFORMANCE_EVENT_TYPE_UNKNOWN = 0;

        // The event is a hardware based event (PERF_TYPE_HARDWARE)
        PERFORMANCE_EVENT_TYPE_HARDWARE = 1;

        // The event is a hardware cache based event (PERF_TYPE_HW_CACHE)
        PERFORMANCE_EVENT_TYPE_HARDWARE_CACHE = 2;

        // The event is a software based event (PERF_TYPE_SOFTWARE)
        PERFORMANCE_EVENT_TYPE_SOFTWARE = 3;
}

// PerformanceEventValue is a single performance event counter. It contains
// the perf config value and its associated counter value.
message PerformanceEventValue {
        // The type of performance event counter.
        PerformanceEventType type = 1;

        // The config value used in the registration of the event group.
        uint64 config = 2;

        // The current value of the counter associated with the type and config
        // value pair.
        uint64 value = 3;
}

// PerformanceEvent describes an event that occurred related to performance
// event activity in the Sensor.
message PerformanceEvent {
        // The total amount of time that the event has been enabled in the
        // sensor. This corresponds to PERF_FORMAT_TOTAL_TIME_ENABLED that is
        // reported by the kernel with the event sample.
        uint64 total_time_enabled = 1;

        // The total amount of time that the event subscription has been running
        // in the sensor. This corresponds to PERF_FORMAT_TOTAL_TIME_RUNNING
        // that is reported by the kernel with the event sample.
        uint64 total_time_running = 2;

        // These are the counter values reported by the kernel with the event
        // sample.
        repeated PerformanceEventValue values = 3;
}
